<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>lcdzzz的博客</title>
  
  <subtitle>等待白鸽飞出</subtitle>
  <link href="http://lcdzzz.github.io/atom.xml" rel="self"/>
  
  <link href="http://lcdzzz.github.io/"/>
  <updated>2021-02-27T05:15:20.627Z</updated>
  <id>http://lcdzzz.github.io/</id>
  
  <author>
    <name>lcdzzz</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>java自学笔记</title>
    <link href="http://lcdzzz.github.io/2021/01/18/java-bi-ji/"/>
    <id>http://lcdzzz.github.io/2021/01/18/java-bi-ji/</id>
    <published>2021-01-18T14:11:16.357Z</published>
    <updated>2021-02-27T05:15:20.627Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="IDEA使用"><a href="#IDEA使用" class="headerlink" title="IDEA使用"></a>IDEA使用</h2><h3 id="新建"><a href="#新建" class="headerlink" title="新建"></a>新建</h3><ol><li><p>新建一个Empty Project</p><p>新建一个空的工程，选择创建工程窗口下面的Empty Project</p></li><li><p>给空的工程起一个名字：javase</p></li><li><p>会自动弹出一个：project structure，这个窗口先取消掉</p></li><li><p>给空的工程下新建Module（模块）</p><p>idea的组织方式projecrt–&gt;module</p></li><li><p>在New Module窗口上点击左下角的java，然后next</p></li><li><p>给module起一个名字</p></li><li><p>编写代码，在src目录下新建类，写代码，并运行。</p></li></ol><p><br><br></p><h3 id="关于IDEA工具的快捷键以及一些简单的设置"><a href="#关于IDEA工具的快捷键以及一些简单的设置" class="headerlink" title="关于IDEA工具的快捷键以及一些简单的设置"></a>关于IDEA工具的快捷键以及一些简单的设置</h3><h4 id="字体设置"><a href="#字体设置" class="headerlink" title="字体设置"></a>字体设置</h4><p>file–&gt;setting–&gt;输入font–&gt;设置字体样式以及字号大小</p><p><br><br></p><h4 id="快捷方式"><a href="#快捷方式" class="headerlink" title="快捷方式"></a>快捷方式</h4><ul><li>psvm（main方法）        sout（system.out.println)</li></ul><ul><li>删除一行：ctrl+y</li></ul><ul><li><p>左侧窗口的列表怎么展开？怎么关闭？</p><p>左箭头关闭，右箭头展开，上下箭头移动</p></li></ul><ul><li>idea中退出任何窗口，都可以使用esc键</li></ul><ul><li><p>任何新增、新建、添加的快捷键：</p><p>​    alt+insert</p></li></ul><ul><li><p>窗口变大变小</p><p>​    ctrl+shift+F12</p></li></ul><ul><li><p>快速运行</p><p>ctrl+shift+F10</p></li></ul><ul><li><p>切换java程序：</p><p>alt+左/右箭头</p></li></ul><ul><li><p>切换窗口：</p><p>alt+标号（打开/关闭）</p><p>alt+1(打开、关闭)</p></li></ul><ul><li>提示方法的参数：ctrl+p</li></ul><ul><li><p>注释：</p><p>单行注释：ctrl+/</p><p>多行注释：ctrl+shift+/</p></li></ul><ul><li><p>怎么定位方法/属性/变量?</p><p>光标停到单词下面，这个单词可能是方法名、变量名，停到单词下面之后，按住ctrl键，出现下划线，点击跳转。</p></li></ul><ul><li>idea当中复制一行是ctrl+d</li></ul><ul><li>idea工具中纠正错误的快捷键：alt+回车</li></ul><ul><li>快速查看源代码：ctrl按住。点击单词</li></ul><ul><li><p>查看一个类的属性和方法：ctrl + F12  </p><br><br><br><br></li></ul><h2 id="super关键字"><a href="#super关键字" class="headerlink" title="super关键字"></a>super关键字</h2><ol><li><p>super是一个关键字，全部小写</p></li><li><p>super和this对比着学习</p><p>this：</p><ul><li><p>能出现在实例方法和构造方法中</p></li><li><p>语法是”this.” 、 “this()”</p></li><li><p><strong>this不能出现在静态方法中</strong></p></li><li><p>大部分条件下是可以省略的</p></li><li><p>this.什么时候不能省略呢？</p><p><strong>在区分局部变量和实例变量的时候不能省略。</strong></p><p><code>public void setName(string name)&#123;</code></p><p>​    <code>this.name=name;</code></p><p><code>&#125;</code></p><p><strong>this()只能出现在构造方法第一行</strong>，通过当前的构造方法去调用“本类”中其他的构造方法，目的是：代码复用。</p></li></ul><p>super：</p><ul><li><p>能出现在实例方法和构造方法中</p></li><li><p>语法是”super.” 、 “super()”</p></li><li><p><strong>super不能出现在静态方法中</strong></p></li><li><p>大部分条件下是可以省略的</p></li><li><p>super.什么时候不能省略呢？</p><p><strong>父类和子类中有同名属性或者说有同样的方法，</strong></p><p><strong>想在子类中访问父类的，super. 不能省略。</strong></p><p><strong>super（)只能出现在构造方法第一行</strong>，通过当前的构造方法去调用“父类”中其他的构造方法，目的是：创建子类对象的时候，先初始化父类型特征</p></li></ul></li><li><p>super()</p><p>表示通过子类的构造方法调用父类的构造方法。</p><p>模拟现实世界中：要想要儿子，必须先有父亲。</p><p>//一个类如果没有手动提供任何构造方法，系统会默认提供一个无参数构造方法。</p><p>//一个类如果手动提供了一个构造方法，那么无参数构造方法系统将不会再提供。</p></li><li><p>重要结论：</p><p><strong>当一个构造方法第一行：</strong></p><p><strong>既没有this（）又没有super（）的话，默认会有一个super（）；</strong></p><p><strong>表示通过当前子类的构造方法调用父类的无参数构造方法。</strong></p><p><strong>所以必须保证父类的无参数构造方法是存在的。</strong></p></li><li><p>注意：</p><p>this()和super()不能共存，他们都是只能出现在构造方法的第一行。</p></li><li><p><strong>无论怎么折腾，父类的构造方法是一定会执行的（100%）。</strong></p><p>//在java语言中不管是new什么对象。最后老祖宗的object类的无参数构造方法一定会执行（object类的无参数构造方法是处于“栈顶部”）</p><p>栈顶的特点：</p><p>最后调用，但最先执行结束。</p><p>后进先出原则</p><p>以后写代码的时候，一个类的无参数构造方法还是建议手动写出来。</p><p>如果无参数构造方法丢失的话，可能会影响到子类对象的构建</p></li><li><p>注意：在构造方法执行过程中一连串调用了父类的构造方法，父类的构造方法有继续向下调用它的父类构造方法，但实际上对象只创建了一个。</p><p>super（实参）的作用：初始化当前对象的父类型特征，并不是创建新对象，对象只创建了一个。</p><p>//java中允许在子类中出现一个和父类同名的变量、同名属性。</p></li><li><p>super不是引用，也不保存内存地址，也不指向任何对象，super只代表当前对象内部的那一块父类型的特征。</p></li><li><p>在父和子中有同名的属性或者相同的方法，如果此时想在子类中访问父类的数据，必须使用”super.”加一区分。</p></li><li><p>在子类中访问父类私有的数据，使用super.没有权限的</p><p>但父类私有的构造方法，可以用super（实参）去构造。</p></li></ol><p><em>super的使用</em><br><em>supe</em>r.属性名    【访问父类的属性】*</p><p><em>super.方法名(实参)   【访问父类的方法】</em></p><p>super.(实参)   【调用父类的构造方法】*</p><br><br><br><br><h2 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h2><ol><li><p>final修饰的变量？</p><p><strong>final修饰的局部标量，一但被赋值，就不能重新赋值【final修饰的变量只能赋一次值】</strong></p></li></ol><ol start="2"><li><p>fianl修饰的方法？</p><p><strong>final修饰的方法无法被覆盖，被重写</strong></p></li></ol><ol start="3"><li><p>fianl修饰的类？</p><p><strong>final修饰的类无法被继承</strong></p></li></ol><ol start="4"><li>final控制不了能不能调用的问题，final管的是：最后的，不能变的，不能改的。</li></ol><ol start="5"><li><p>final修饰的变量，如果这个变量是一个人”引用“</p><p>引用也是一个变量，所以也是不能变的</p><p><code>*final person p=new person(30);*</code><br><code>*p=new Person(30)//错误！无法为最终变量p分配值*</code></p></li></ol><p>   <strong>final修饰的引用：</strong></p><p>  该引用只能指向1个对象，并且它只能永远指向该对象，无法指向其他对象。<br>  并且在该方法执行过程中，该引用指向对象后，该对象不会被垃圾回收器回收。</p><p>  直到当前方法结束，才会释放空间。</p><p>  虽然final的引用指向对象A后，不能再重新指向对象B。<br>  但是对象内部的数据可以被修改。</p><ol start="6"><li><p><strong>final修饰的实例变量，系统不负责赋默认值，要求程序员必须手动赋值。</strong></p><p>这个手动赋值，在变量后面赋值可以，在构造方法赋值也可以。</p><p>final修饰的实例变量一般添加static修饰</p><p><em>解释：</em><br><em>i永远都是10，创建100个对象，i也是10</em><br><em>i是10是永远都不会改变的，既然这样，没必要声明为实例变量，最好是静态，节省内存空间</em></p><p><strong>static final联合修饰的变量成为“常量”。</strong></p></li></ol><p>​    例：<code>public static final double PI=3.1415926;</code></p><p>   常量名建议大写，每个单词之间采用下划线来衔接。</p><p>   <em>常量：实际上常量和静态变量一样，区别在于：</em></p><p>   <em>常量的值不能变。</em></p><p>   <em>常量和静态变量，都是存储在方法去，并且都是类加载时初始化</em>。</p><br><br><br><br><h2 id="抽象类（abstract）"><a href="#抽象类（abstract）" class="headerlink" title="抽象类（abstract）"></a>抽象类（abstract）</h2><ol><li><p>抽象类怎么定义？</p><p>在class钱添加abstract关键字。</p></li><li><p><strong>抽象类是无法实例化的，无法创建对象的，所以抽象类是用来被子类继承的</strong>。</p></li><li><p>final和abstract不能联合使用，这两个关键字是对立的。</p></li><li><p>抽象类的子类可以是抽象类，也可以不是。</p></li><li><p>抽象类虽然无法实例化，但是抽象类有构造方法，这个构造方法是供子类使用的。</p></li><li><p><strong>抽象类中不一定有抽象方法，但是抽象方法必须出现在抽象类中。</strong></p></li><li><p>抽象方法怎么定义？</p><p><code>public abstract void dosome();</code></p></li><li><p><strong>一个非抽象的类，继承抽象类，必须将抽象类中的抽象方法进行覆盖/重写/实现。</strong></p></li><li><p>面试题（判断）：java语言中凡是没有方法体的方法都是抽象方法。（×）</p><p><em>object类中就有很多方法没有方法体，都是以“;”结尾的，但他们不是抽象方法，例如：</em></p><p><em><code>public native int hashCode();</code></em></p><p><em>这个方法底层调用了C++写的动态链接库。</em></p><p><em>前面修饰符列表中没有：abstract。有一个native表示调用JVM本地程序。</em></p><br><br><br><br></li></ol><h2 id="接口（接口也是一种类）"><a href="#接口（接口也是一种类）" class="headerlink" title="接口（接口也是一种类）"></a>接口（接口也是一种类）</h2><h3 id="接口的基础语法"><a href="#接口的基础语法" class="headerlink" title="接口的基础语法"></a>接口的基础语法</h3><ol><li><p>接口也是一种“引用数据类型”。编译之后也是一个class字节码文件。</p></li><li><p>接口完全抽象。（抽象类是半抽象。）或者也可以说接口是特殊的抽象类。</p></li><li><p>接口怎么定义的，语法是什么？</p><p>[修饰符列表] interface 接口名{}</p></li><li><p>接口支持多继承。</p><p><code>interface C extend A，B&#123;</code></p><p><code>&#125;</code></p></li><li><p>接口只包含两个内容：常量+抽象方法。</p></li><li><p>接口中所有元素都会public修饰的。</p></li><li><p>接口中的抽象方法定义是：pubiic abstract 修饰符可以省略。</p></li><li><p>接口中的常量的public static final可以省略。</p></li><li><p>接口中的方法是抽象方法，所以接口中的方法不能有方法体（不能加大括号{}）。</p></li><li><p>一个非抽象的类，实现接口的时候，必须将接口中所有方法加以实现。</p></li><li><p>一个类可以实现多个接口</p></li><li><p>extends和implements可以共存，extends在前，implements在后。</p><p><code>class Cat extends Animal implements Flyable&#123;</code></p><p>​    <code>&#125;</code></p></li></ol><ol start="13"><li><p>使用使用接口，在写代码时，可以使用多态（父类型引用指向子类型对象）。</p><p>向下转型要养成习惯：转型之前先if+instanceof进行判断</p><p><code>if(m instanceof K)&#123;</code></p><p><code>K k = (K) m；</code></p><p><code>&#125;</code></p><p><br><br></p></li></ol><h3 id="接口在开发中的作用"><a href="#接口在开发中的作用" class="headerlink" title="接口在开发中的作用"></a>接口在开发中的作用</h3><p>注意：接口在开发中的作用，类似于多态在开发中的作用。</p><p>多态：面向抽象编程，不要面向具体编程。降低程序耦合度。提高程序的扩展力。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Master</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">feed</span><span class="token punctuation">(</span><span class="token class-name">Dog</span> d<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">feed</span><span class="token punctuation">(</span><span class="token class-name">Cat</span> c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token comment">//假设又要养其他宠物，那么这个时候需要再加1个方法。（需要修改代码）</span>    <span class="token comment">//这样扩展力太差，违背了ocp原则（对扩展开放，对修改关闭）</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Master</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">feed</span><span class="token punctuation">(</span><span class="token class-name">Animal</span> a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">/*        面向Animal 父类编程，父类是比子类更抽象的。所以我们叫做面向抽象编程，不要面向具体编程。这样程序的扩展力就强。        */</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接口在开发总共的作用？</p><p>抽象是完全抽象的，而我们以后正好要求，面向抽象编程。</p><p>面向抽象编程这句话以后可以修改为：面向接口编程。</p><p>有了剪口就有了可插拔，可插拔表示扩展力很强，不是焊接死的。</p><p>主板和内存条之间有插槽，这个插槽就是接口，内存条坏了，可以重新买一个换下来，这叫做高扩展性（低耦合度）。</p><p><br><br></p><p><strong>总结一句话：三个字<u>解耦合</u></strong></p><p>面向接口编程，可以降低程序耦合度，提高程序扩展力。符合ocp开发原则 。接口的使用离不开多态机制。（接口+多态才可以打到降低耦合度。）</p><p> 接口可以解耦合，解开的是谁和谁的耦合？？？</p><p>任何一个接口都有调用者和实现着。</p><p>接口可以讲调用者和实现者解耦合。</p><p>调用者面向接口调用。</p><p>实现者面向接口编写实现。</p><br><p>以后进行大项目的开发，一般都是讲项目分离成一个模块一个模块的，模块和模块之间采用接口衔接，降低耦合度 </p><br><br><br><br><h2 id="类型和类型之间的关系："><a href="#类型和类型之间的关系：" class="headerlink" title="类型和类型之间的关系："></a>类型和类型之间的关系：</h2><p>is a（继承）、has a（关联）、 like a（实现）</p><ul><li><p>is a:</p><p>Ca is a Animal(猫是一个动物)</p><p>凡是能够满足is a的表示“继承关系”</p><p><code>A extends B;</code></p></li><li><p>has a:</p><p>I has a Pen(我有一支笔)</p><p>凡是能够满足has a 关系的表示“关联关系”</p><p>关联关系通常以“属性”的形式存在。</p><p><code>A&#123;</code></p><p><code>   B b;</code></p><p><code>&#125;</code></p></li><li><p>like a：</p><p>Cooker like a FoodMenu(厨师想一个菜单一样)、</p><p>凡是能够满足like a 关系的表示“实现关系”</p><p>实现关系通常是：类实现接口。</p><p><code>A implements B;</code></p></li></ul><br><br><br><br><h3 id="抽象类和接口有什么区别"><a href="#抽象类和接口有什么区别" class="headerlink" title="抽象类和接口有什么区别"></a>抽象类和接口有什么区别</h3><p><em>这里直说下抽象类和接口在语法上的区别。至于以后抽象类和接口应该怎么进行选择，通过后面的项目去体会。</em></p><br><p>抽象类是半抽象的</p><p>接口是完全抽象的</p><br><p>抽象类中有构造方法。</p><p>接口中没有构造方法。</p><br><p>类与类之间只能单继承。</p><p>接口与接口直接支持多继承。</p><br><p>一个抽象类只能继承一个类（单继承）。</p><p>一个类可以同时实现多个接口。</p><br><p>接口中只允许出现常量和抽象方法。</p><br><p>以后接口使用的比抽象类多。一般抽象类使用的还是少。</p><p>接口一般都是对“行为”的抽象。</p><p>抽象类既可以抽象行为又可以抽象数据。</p><br><br><br><br><h2 id="package和import机制"><a href="#package和import机制" class="headerlink" title="package和import机制"></a>package和import机制</h2><h3 id="package"><a href="#package" class="headerlink" title="package"></a>package</h3><ol><li><p>package出现在java源文件第一行。</p></li><li><p>带有包名怎么编译？</p><p>javac -d . xxx.java</p></li><li><p>怎么运行？</p><p>java 完整类名</p><p>例：<code>java com.bjpowernode.javase.chapter17.HelloWorld</code></p><br><br></li></ol><h3 id="import"><a href="#import" class="headerlink" title="import"></a>import</h3><p>import什么时候不需要？</p><ul><li>java.lang不需要</li><li>同包下不需要</li><li>其他一律都需要</li></ul><p>怎么用？</p><ul><li>import 完整类名</li><li>import 包名.*;</li></ul><p><br><br><br><br></p><h2 id="访问控制权限"><a href="#访问控制权限" class="headerlink" title="访问控制权限"></a>访问控制权限</h2><h3 id="有哪些访问控制权限？"><a href="#有哪些访问控制权限？" class="headerlink" title="有哪些访问控制权限？"></a>有哪些访问控制权限？</h3><ul><li>private 私有</li><li>protect 受保护</li><li>public 公开</li><li> ____    默认</li></ul><p><br><br></p><h3 id="以上四种访问控制权限，控制的范围是什么？"><a href="#以上四种访问控制权限，控制的范围是什么？" class="headerlink" title="以上四种访问控制权限，控制的范围是什么？"></a>以上四种访问控制权限，控制的范围是什么？</h3><table><thead><tr><th>访问控制修饰符</th><th>本类</th><th>同包</th><th>子类</th><th>任意位置</th></tr></thead><tbody><tr><td>public</td><td>Y</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>protected</td><td>Y</td><td>Y</td><td>Y</td><td>N</td></tr><tr><td>默认</td><td>Y</td><td>Y</td><td>N</td><td>N</td></tr><tr><td>private</td><td>Y</td><td>N</td><td>N</td><td>N</td></tr></tbody></table><p>public&gt;protected&gt;默认&gt;private</p><p><br><br></p><h3 id="访问控制权限修饰符可以修饰什么"><a href="#访问控制权限修饰符可以修饰什么" class="headerlink" title="访问控制权限修饰符可以修饰什么"></a>访问控制权限修饰符可以修饰什么</h3><ul><li>属性（4个都行）</li><li>方法（4个都能用）</li><li>类（public 和默认可以，其他不行）</li><li>接口（public 和默认可以，其他不行）</li></ul><p><br><br><br><br></p><h2 id="JDK类库的根类：Object"><a href="#JDK类库的根类：Object" class="headerlink" title="JDK类库的根类：Object"></a>JDK类库的根类：Object</h2><p>这个老祖宗中的方法都是所有子类通用的，任何一个类默认继承Object，就算没有继承，也会间接继承</p><h3 id="Object类当中有哪些常用的方法？"><a href="#Object类当中有哪些常用的方法？" class="headerlink" title="Object类当中有哪些常用的方法？"></a>Object类当中有哪些常用的方法？</h3><p>怎么找？</p><ol><li>去源代码当中。（但这种方式比较麻烦，源代码也比较难）</li><li>去查阅java的类库的帮助文档。</li></ol><p>什么事API?</p><p>​      应用程序的编程接口。整个JDK的类库就是一个javase的API（application program interface）。每一个API都会配置一套API帮助文档。SUN公司提前写好的这套类库就是API。（一般每一份API都对应一份API帮助文档。）、</p><p>目前为止我们只需要知道这几个方法即可：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token class-name">Object</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span>； <span class="token comment">//负责对象克隆的</span><span class="token keyword">int</span> <span class="token function">hashOde</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//换区对象哈希值的一个方法</span><span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//判断两个对象是否相等</span><span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//讲哦对象转换成字符串形式</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//垃圾回收器负责调用的方法 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br><br></p><h3 id="toString-方法"><a href="#toString-方法" class="headerlink" title="toString()方法"></a>toString()方法</h3><p>以后所有类的toString()方法是需要重写的，重写规则，越简单越明了就好。</p><p>System.out.println(引用)；这里会自动调用“引用”的toString()方法。</p><p>String类是SUN写的，toString方法已经重写了。</p><p><br><br></p><h3 id="equals-方法"><a href="#equals-方法" class="headerlink" title="equals()方法"></a>equals()方法</h3><p>以后所有类的equals方法也需要重写，因为object中的equals方法比较的是两个对象的内存地址，我们应该比较内容，所以需要重写。</p><p>重写规则：自己定，主要看是什么和什么相等时表示里欧昂个对象相等。</p><p>基本数据类型比较实用：==</p><p>对象和对象比较：调用equals方法</p><p>String类是SUN编写的，所以Strng类的equals方法重写了。</p><p>以后判断两个字符串是否相等，最好不要实用==。要调用字符串对象的equals方法。</p><p><br><br></p><h3 id="finalize-方法"><a href="#finalize-方法" class="headerlink" title="finalize()方法"></a>finalize()方法</h3><ol><li><p>在Object类中的源代码：</p><p><code>protected void finaliz() throw Throwable&#123; &#125;</code></p><p>GC：负责带一把过finalize()方法</p></li><li><p>finalize()方法只有一个方法体，里面没有代码，而且这个方法是protected修饰的。</p></li><li><p>这个方法不需要程序员手动调用，JVM的垃圾回收器会负责调调用这个方法。</p><p>不像equals toString ,equals和toString（）方法是需要你写代码调用的。</p><p>finalize（）只需要重写，重写玩将来会自动会有程序来调用。</p></li><li><p>finalize()方法的执行时机</p><p>当一个java对象即将被垃圾回收器回收的时候，垃圾回收器负责调用fianlize()方法。</p></li><li><p>finalize()方法实际上是SUN公司为java程序员准备的一个实际，垃圾销毁时机。</p><p>如果希望在对象销毁时机执行一段代码的话，这段代码要写在finalize()方法中。</p></li><li><p>静态代码块的作用是什么？</p><p>static{</p><p>   …</p><p>}</p><p>静态代码块在类加载的时候执行，并且只执行一次，这是一个SUN准备的类加载时机。</p><p>finalize()方法同样是sun为程序员准备的一个时机。</p><p>这个时机是垃圾回收时机。</p></li><li><p>有段代码可以建议垃圾回收期启动</p><p><code>System.gc();   // 建议启动垃圾回收器</code></p></li></ol><p><br><br></p><h3 id="hashCode方法："><a href="#hashCode方法：" class="headerlink" title="hashCode方法："></a>hashCode方法：</h3><ol><li><p>在object中的hashCode方法是怎么样的?</p><p>public native int hashCode();</p><p>这个方法不是抽象方法，带有native关键字，底层调用c++程序。</p></li><li><p>hashCode()方法返回的是哈希值：</p><p>实际上就是java对象的内存地址，经过哈希算法，得出一个值。</p><p>所以hashCode()方法的执行结果可以等同看做一个java对象的内存地址</p></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> main <span class="token punctuation">(</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">Object</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> hashCodeValue <span class="token operator">=</span> o<span class="token punctuation">.</span><span class="token function">hashcode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//对象内存地址经过哈希算法转换的一个数字。可以等同看做内存地址。</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hashCodeValue<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//89641564</span>              <span class="token class-name">MyClass</span> mc<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">MyClass</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mc<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//5641864654</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">MyClass</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br><br><br><br></p><h2 id="匿名内部类："><a href="#匿名内部类：" class="headerlink" title="匿名内部类："></a>匿名内部类：</h2><ol><li><p>内部类：在类的内部又定义了一个新的类。被称为内部类。</p></li><li><p>内部类的分类：</p><p>静态内部类：类似于静态变量</p><p>实例内部类：类似于实例变量</p><p>局部内部类：类似于局部变量</p></li><li><p>使用内部类编写的代码，可读性差，尽量别用</p></li><li><p>匿名内部类是局部内部类的一种。因为这个类没有名字而得名，叫做匿名内部类。</p></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">mm<span class="token punctuation">.</span><span class="token function">mySum</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Compute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*mm是对象，使用了mySum这个方法compute是一个接口，不能直接new对象，这里使用了匿名内部类。如果不用匿名内部类，那么需要再创建一个class，去implements接口*/</span><span class="token comment">//以下是不使用匿名内部类的方法</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ComputeImpl</span> <span class="token keyword">implements</span> <span class="token class-name">Compute</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> sum <span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br><br><br><br></p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><ol><li><p>数组的优缺点，并且要理解为什么</p><ol><li><p>空间存储上，内存地址是连续的</p></li><li><p>每个元素占用的空间大小相同</p></li><li><p>知道首元素的内存地址</p></li><li><p>通过下班可以计算出偏移量</p><p>通过一个数学表达式，就可以快速计算出摸个下标为止上元素的内存1地址，直接通过内存地址定位，效率非常高。</p></li><li><p>优点：检索效率高。</p><p>缺点随记增删改效率较低，数组无法存储大数据量</p><p>注意：数组最后一个元素增删效率不受影响</p><br></li></ol></li><li><p>以为数组的静态初始化和动态初始化</p><ul><li><p>静态初始化：</p><p><code>int[] arr = &#123;1,2,3,4&#125;;</code></p><p><code>object[] objs = &#123;new Object(),new Object(),new Object() &#125;;</code></p></li><li><p>动态初始化</p><p><code>int []arr=new int[4];</code></p><p><code>Object[] objs=new Object[4]; //元素默认值为null</code></p><br></li></ul></li><li><p>一维数组的遍历</p><br></li><li><p>二维数组的静态初始化和动态初始化</p><ul><li><p>静态初始化：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token operator">=</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token operator">=</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#123;</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ol><ul><li><p>动态初始化</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//三行四列</span><span class="token class-name">Object</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token class-name">Animal</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//Animal累的数组，里面可以存储Animal对象以及它的子类</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ol start="5"><li><p>二维数组的遍历</p></li><li><p>main方法上”String[] args”参数的使用</p></li><li><p>数组的拷贝：System.arraycopy()方法的使用</p><p>数组长度一旦确定，不可变。</p><p>所以数组长度不够的时候需要扩容，扩容的机制是：新建一个大数组，讲小数组的数据拷贝到大数组，小数组被垃圾回收器回收</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Selftest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> targetArr<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>targetArr<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>targetArr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>targetArr<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>targetArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ol start="8"><li>对数组中存储应用数据类型的情况，要会画它的内存结构图</li></ol><p><br><br><br><br></p><h2 id="Java-JDK中内置的一个类：java-lang-String"><a href="#Java-JDK中内置的一个类：java-lang-String" class="headerlink" title="Java JDK中内置的一个类：java.lang.String"></a>Java JDK中内置的一个类：java.lang.String</h2><ol><li><p>String 表示字符串类型，属于引用数据类型，不属于基本数据类型。</p></li><li><p>在java中随便使用双引号括起来的对象。例如：”abc”,”hello world”，这是三个String对象</p></li><li><p>java中规定，双引号括起来的字符串是不可变的·，也就是说”abc”从出生到死亡，都不可变。</p></li><li><p>在JDK当中双引号括起来的字符串。例如：**”abc” “def”都是直接存储在”方法区’’的”字符串常量池”当中的。**</p><p>为什么SUN公司把自付出存储在一个“字符串常量池”当中呢，因为字符串在实际开发中使用太频繁，为了执行效率，所以把字符串放到了方法区的字符串常量池当中。</p></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s1 <span class="token operator">=</span><span class="token string">"abcdef"</span><span class="token punctuation">;</span><span class="token class-name">String</span> s2 <span class="token operator">=</span><span class="token string">"abcdef"</span><span class="token operator">+</span><span class="token string">"xy"</span><span class="token punctuation">;</span><span class="token comment">/**↑这两行代码在表示底层创建了3个字符串对象，都在字符串常量池当中↓这是使用new方法创建的字符串对象。这个代码中的“xy”是从哪里来的？凡是双引号括起来的都在字符串常量池当中有一份new对象的时候一定是在堆内存当中开辟空间*/</span><span class="token class-name">String</span> s3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"xy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//i变量中保持的是100这个值</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span><span class="token comment">//s变量中保存的是字符串对象的内存地址</span><span class="token comment">//s引用中保存的不是"abd"，是0x1111</span><span class="token comment">//而0x1111是“abd”字符串对象在“字符串常量池”当中的内存地址。</span><span class="token class-name">String</span> s <span class="token operator">=</span><span class="token string">"abc"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br><br></p><h3 id="关于String类中的构造方法"><a href="#关于String类中的构造方法" class="headerlink" title="关于String类中的构造方法"></a>关于String类中的构造方法</h3><ol><li>String s = new String(“”);</li><li>String s = “”;//最常用</li><li>String s = new String (char数组);</li><li>String s = new String (char数组，起始下标，长度);</li><li>String s = new String (byte数组)；</li><li>String s = new String (byte数组，起始下标，长度)；</li></ol><p><br><br><br><br></p><h1 id="String-类当中常用方法"><a href="#String-类当中常用方法" class="headerlink" title="String 类当中常用方法"></a>String 类当中常用方法</h1><ol><li><p>（掌握） <strong>char charAt(int index)</strong></p><p><code>char c = &quot;中国人&quot;.charAt(1);</code></p><p><code>System.out.printlb(c);//国</code></p><br></li><li><p>（了解） <strong>int compareTo(String anotherString)</strong></p><p>int result = “abc”.compareTo(“abc”);</p><p>System.out.println(result);//0</p><p>//输出0（等于0）–&gt;前后一致</p><p>//输出1（大于0）–&gt;前大后小</p><p>//输出-1（小于0）–&gt;前小后大</p><p><em>按字典顺序</em></p><p>拿着字符串第一个字母和后面字符串的第一个字母比较。能分胜负就不再比较了。</p><p>System.out.println(“xyz”.compareTo(“yxz”));//-1</p><br></li><li><p>（掌握） <strong>boolean contains(CharSequence s)</strong></p><p><u>判断前面的字符串中是否包含后面的字符串。</u></p><p>System.out.println(“hello.java”.contains(“.java”));//ture。如果没有，则输出false</p><br></li><li><p>（掌握） <strong>boolean endsWith(String suffix)</strong></p><p><u>判断当前字符串是否以某个字符串结尾</u></p><p>System.out.println(“test.txt”.endsWith(“java”));//false</p><br></li><li><p>（掌握） <strong>boolean equals(Object anObject)</strong></p><p><u>比较两个字符串鼻血使用equals方法，不能使用“==”</u></p><p>System.out.println(“abc”.equals(“abc”));//true;</p><br></li><li><p>（掌握） <strong>boolean equalsIgnoreCase(String anotherString)</strong></p><p><u>判断两个字符串是否相等，并且同时忽略大小写。</u></p><br></li><li><p>（掌握） <strong>byte[] getBytes()</strong></p><p><u>将字符串对象转换成字节数组</u></p><p>byte[] bytes = “abcd”.getBytes();</p><p>//遍历以后输出的是 97 98 99 100</p><br></li><li><p>（掌握） int indexOf(String str)**</p><p><u>判断某个字符串在当前字符串中<strong>第一次</strong>出现处的索引（下标）</u></p><p>System,out.println(“12345java2222”.indexOf(“java”));//6</p><br></li><li><p>（掌握） lastInt indexOf(String str)**</p><p><u>判断某个字符串在当前字符串中<strong>最后一次</strong>出现处的索引（下标）</u></p><p>System,out.println(“12345java2222”.lastIndexOf(“2”));//12</p><br></li><li><p>（掌握） <strong>boolean isEmpty()</strong></p><p><u>判断某个字符串是否为”空字符串”</u></p><p>String s = “”；//不能是null，不然会空指针异常,同时必须为空，就算是空格，返回的也是false；</p><p>System.out.println(s.isEmpty());</p><br></li><li><p>（掌握） <strong>int length()</strong></p><p><u>面试题：判断数组长度和判断字符串长度不一样</u></p><p><u>判断数组长度是length属性，判断字符串长度是length()方法</u></p><p>System.out.println(“abc”.length());//3</p><br></li><li><p>（掌握） <strong>String replace(CharSequence target, CharSequence replacement)</strong></p><p><u>String的父接口就是：CharSequence</u></p><p>String s =”abc”;<br>String s1=s.replace(“a”,”b”);<br>System.out.println(s1);</p><br></li><li><p>（掌握） <strong>String [] split(String regex)</strong></p><p><u>拆分字符串</u></p><p>String[] ymd = “2002-6-1”.split(“-“);<br>for (int i = 0; i &lt; ymd.length ; i++) {<br>System.out.println(ymd[i]);</p><p>//可以继续向下拆分，比如通过”0”拆分</p><p>}//输出2002  6  1</p><br></li><li><p>（掌握） <strong>boolean startWith(String prefix)</strong></p><p><u>判断某个字符串是否以某个子字符串开始</u></p><p>System.out.println(“111222333”.startWith(“111”));//true</p><p>System.out.println(“111222333”.startWith(“123”));//false</p><br></li><li><p>（掌握） <strong>String substring(int beginIndex)</strong></p><p><u>截取字符串</u></p><p>System.out.println(“111222333”.substring(6));333</p><br></li><li><p>（掌握） <strong>String substring(int beginIndex,int endIndex)</strong></p><p><u>beginIndex包括，endIndex不包括</u></p><p>System.out.println(“111222333444”.substring(7,10));334【左闭右开】</p><br></li><li><p>（掌握） <strong>char[] toCharArray();</strong></p><p><u>将字符串转换成char数组</u></p><p>char[] chars = “我是中国人”.toCharArray();</p><p>//遍历得出结果：我 是 中 国 人</p><br></li><li><p>（掌握） <strong>String toLowerCase()</strong></p><p><u>转换成小写</u></p><p>System.out.println(“ABCDef”.toLowerCase());</p><br></li><li><p>（掌握） <strong>String toUpperCase()</strong></p><p><u>转换成大写</u></p><p>System.out.println(“ABCDef”.toLowerCase());</p><br></li><li><p>（掌握） <strong>String trim();</strong></p><p><u>去除字符串前后空白</u></p><p>System.out.println(“   sda sdas  “.trim());//sda sdas</p><br></li><li><p>(掌握) .String中有一个方法是静态的不需要new对象</p><p>这个方法叫做valueOf，作用是“非字符串“转换成”字符串”</p><p>String s1 = String.valueOf(true);</p><p>String s1 = String.valueOf(123);</p><p>System.out.println(s1);</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//这个静态的valueOf()方法，参数是一个对象的时候，会自动调用这个对象的toString()方法</span><span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//没有重写toString()方法之前是对象内存地址 </span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//我是一个vip客户！</span><span class="token keyword">class</span> <span class="token class-name">Customer</span><span class="token punctuation">&#123;</span>    <span class="token comment">//重写toString()方法</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"我是一个vip客户！"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>本质上System.out.println()这个方法在输出任何数据的时候都是先转换成字符串，再输出 </p><p><br><br><br><br></p></li></ol><h2 id="StringBuffer和StringBulider"><a href="#StringBuffer和StringBulider" class="headerlink" title="StringBuffer和StringBulider"></a>StringBuffer和StringBulider</h2><h3 id="StringBuffer"><a href="#StringBuffer" class="headerlink" title="StringBuffer"></a>StringBuffer</h3><ul><li><p>如果以后需要进行大量的字符串拼接操作，建议使用JDK自带的：<br>java.lang.StringBuffer;<br>java.lang.StringBuilder;</p></li><li><p>如何优化StringBuffer的性能？</p><p>在创建StringBuffer的时候尽可能给定一个初始化容量。</p><p>最好减少底层的扩容次数。预估计一下，给一个大一些的初始化容量。</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//创建一个初始化容量为16个byte[]数组（字符串缓冲区对象）</span>    <span class="token class-name">StringBuffer</span> stringBuffer<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//拼接字符串，以后拼接字符串同意调用append()方法</span>    <span class="token comment">//append是追加的意思</span>    stringBuffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"abd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    stringBuffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token number">3.14</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    stringBuffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    stringBuffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token number">100l</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//append方法底层在进行追加的时候，如果byte数组慢了，会自动扩容</span>    stringBuffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token number">100l</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stringBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//abd3.14true100100</span>    <span class="token comment">//指定初始化容量的StringBuffer对象（字符串缓冲区对象）</span>    <span class="token class-name">StringBuffer</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br><br></p><h3 id="StringBuilder和StringBuffer的异同"><a href="#StringBuilder和StringBuffer的异同" class="headerlink" title="StringBuilder和StringBuffer的异同"></a>StringBuilder和StringBuffer的异同</h3><ul><li>StringBuffer中的方法都有synchronized关键字修饰。表示StringBuffer在多线程环境下运行时安全的。StringBuilder则不安全</li><li>其余基本一样</li></ul><p><br><br><br><br></p><h2 id="8种基本数据类型对应的包装类型及方法"><a href="#8种基本数据类型对应的包装类型及方法" class="headerlink" title="8种基本数据类型对应的包装类型及方法"></a>8种基本数据类型对应的包装类型及方法</h2><h3 id="基本数据类型名对应的包装类型名"><a href="#基本数据类型名对应的包装类型名" class="headerlink" title="基本数据类型名对应的包装类型名"></a>基本数据类型名对应的包装类型名</h3><table><thead><tr><th>基本数据类型</th><th>包装类型</th><th>父类</th></tr></thead><tbody><tr><td>byte</td><td>java.lang.Byte</td><td>Number</td></tr><tr><td>short</td><td>java.lang.Short</td><td>Number</td></tr><tr><td>int</td><td>java.lang.Integer</td><td>Number</td></tr><tr><td>long</td><td>java.lang.Long</td><td>Number</td></tr><tr><td>float</td><td>java.lang.Float</td><td>Number</td></tr><tr><td>double</td><td>java.lang.Double</td><td>Number</td></tr><tr><td>boolean</td><td>java.lang.Boolean</td><td>Object</td></tr><tr><td>char</td><td>java.lang.Character</td><td>Object</td></tr></tbody></table><ul><li>以上八种包装类中，重点以java.lang.Integer为代表进行学习，其他的类型照葫芦画瓢就行</li></ul><h3 id="拆装箱及方法"><a href="#拆装箱及方法" class="headerlink" title="拆装箱及方法"></a>拆装箱及方法</h3><ul><li><p>八种包装类其中6个都是数字对应的包装类，他们的父类都是Nunber可先研究下Number中公共的方法：</p><p>Number是一个抽象类，无法实例化对象</p><p>Number类中有这样的方法：</p><table><thead><tr><th><strong>Modifier and Type</strong></th><th align="center"><strong>Method and Description</strong></th></tr></thead><tbody><tr><td>byte</td><td align="center"><code>byteValue()</code>返回指定号码作为值 <code>byte</code> ，这可能涉及舍入或截断。</td></tr><tr><td>abstract double</td><td align="center"><code>doubleValue()</code>返回指定数字的值为 <code>double</code> ，可能涉及四舍五入。</td></tr><tr><td>abstract float</td><td align="center"><code>floatValue()</code>返回指定数字的值为 <code>float</code> ，可能涉及四舍五入。</td></tr><tr><td>abstract int</td><td align="center"><code>intValue()</code>返回指定号码作为值 <code>int</code> ，这可能涉及舍入或截断。</td></tr><tr><td>abstract long</td><td align="center"><code>longValue()</code>返回指定数字的值为 <code>long</code> ，可能涉及四舍五入或截断。</td></tr><tr><td>short</td><td align="center"><code>shortValue()</code>返回指定号码作为值 <code>short</code> ，这可能涉及舍入或截断。</td></tr></tbody></table></li></ul><br><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//123这个基本数据类型，进行构造方法的包装打到了：基本数据类型向引用数据类型的转型；</span>    <span class="token comment">//基本数据类型（转换为）引用数据类型：装箱</span>    <span class="token class-name">Integer</span> i <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//引用数据类型（转换为）基本数据类型：拆箱</span>    <span class="token keyword">float</span> f <span class="token operator">=</span> i<span class="token punctuation">.</span><span class="token function">floatValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//123.0</span>    <span class="token keyword">int</span> revalue <span class="token operator">=</span> i<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>revalue<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//123</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>关于Integer类的构造方法，有两个：</p><p>Integer(int)</p><p>Integer(String)</p></li><li><p>通过访问包装类的常量，来获取最大值和最小值：</p><p>System.out.println(Inter.MAX_VALUE);</p><p>System.out.println(Inter.MIN_VALUE);</p><p><br><br></p></li></ul><h3 id="JDK1-5以后，支持自动拆装箱："><a href="#JDK1-5以后，支持自动拆装箱：" class="headerlink" title="JDK1.5以后，支持自动拆装箱："></a>JDK1.5以后，支持自动拆装箱：</h3><ul><li><p>自动装箱：int–&gt;Integer</p><p>Integer x = 100;</p></li><li><p>自动拆箱：Integer–&gt;int</p><p>int y = x;</p><p><br><br><br><br></p></li></ul><h2 id="关于方法权益中的“整数型常量池”"><a href="#关于方法权益中的“整数型常量池”" class="headerlink" title="关于方法权益中的“整数型常量池”"></a>关于方法权益中的“整数型常量池”</h2><p>java中为了提高程序的执行小效率，讲[-128,127]之间的所有数据提前创建好，放到一个方法去的”整数型常量池“当中了，目的是只要这个区间的数据不需要再new了，可以直接从整数型常量池中取出来。 </p><h2 id="Integer常用方法"><a href="#Integer常用方法" class="headerlink" title="Integer常用方法"></a>Integer常用方法</h2><ol><li><p><strong>static int parseInt(String s)</strong></p><p><u>静态方法，传参String，返回int</u></p><p>parse方法，把字符串转化成基本数据类型</p><p>int retValue = Integer.parseInt(“123”);//123,String–&gt;int</p><p>照葫芦画瓢：</p><p>double retValue2 = Double.parseDouble(“3.14”);</p><p>System.out.println(retValue2+1); //4.140000000000001(精度问题)</p></li></ol><ol start="2"><li><p><strong>valueOf</strong>方法作为了解</p><p>static Integer valueOf(int i)</p><p><u>静态的：int –&gt;Integer</u></p><p><code>Integer i1 = Integer.valueOf(100);</code></p><br><p>static Integer valueOf(String s)</p><p><u>静态的：String–&gt;Integer</u></p><p><code>Integer i2 = Integer.valueOf(&quot;100&quot;);</code></p><p><br><br><br><br></p></li></ol><h2 id="String-int-Integer三种类型的互相转换："><a href="#String-int-Integer三种类型的互相转换：" class="headerlink" title="String int Integer三种类型的互相转换："></a>String int Integer三种类型的互相转换：</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//String -->int</span>    <span class="token class-name">String</span> s1<span class="token operator">=</span><span class="token string">"100"</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i1 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i1<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//101</span>  <span class="token comment">//int -->String</span>    <span class="token class-name">String</span> s2 <span class="token operator">=</span> i1<span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1001</span>        <span class="token keyword">long</span> i<span class="token operator">=</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Integer</span> ig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> s<span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//long-->String</span>        <span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>ig<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Integer-->String</span>  <span class="token comment">//int -->Integer</span>  <span class="token comment">//自动装箱</span>  <span class="token class-name">Integer</span> x<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">;</span>  <span class="token comment">//Integer -->int</span>  <span class="token comment">//自动拆箱</span>  <span class="token keyword">int</span> y <span class="token operator">=</span> x<span class="token punctuation">;</span>  <span class="token comment">//String -->Integer</span>    <span class="token class-name">Integer</span> k <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//Integer -->String</span>    <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>   <br><br><br><br></p><h2 id="java对日期的处理："><a href="#java对日期的处理：" class="headerlink" title="java对日期的处理："></a>java对日期的处理：</h2><ol><li><p>怎么获取系统当前时间</p></li><li><p>String –&gt;Date</p></li><li><p>Date –&gt;String</p><p>注意：字符串的日期格式和SimpleDateFormat对象指定的日期格式要一直，不然会出现异常</p></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>text<span class="token punctuation">.</span></span><span class="token class-name">SimpleDateFormat</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>     <span class="token comment">//获取系统当前时间</span>        <span class="token class-name">Date</span> nowTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>nowTime<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Thu Feb 04 23:20:25 CST 2021</span>        <span class="token comment">/**         * 日期可以格式化吗？         * 将日期类型Date,按照指定格式进行转换：Date (转换成具有一定格式的日期字符串) -->String         * SimpleDateFormat是java。text包下的。专门负责日期格式化         * yyyy年         * MM月         * dd日         * HH小时         * mm分         * ss秒         * SSS毫秒         */</span>        <span class="token class-name">SimpleDateFormat</span> sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyy-M-d H:m:s:S"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//格式随意组织，特殊字母不能动,这里的字母是java定好的，不能动</span>        <span class="token class-name">String</span> nowTimeStr <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>nowTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>nowTimeStr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//String-->Date</span>        <span class="token class-name">String</span> time <span class="token operator">=</span> <span class="token string">"2008-08-08 08:08:08 888"</span><span class="token punctuation">;</span>        <span class="token class-name">SimpleDateFormat</span> sdf2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-M-d H:m:s S"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//上面两个格式必须相同</span>        <span class="token class-name">Date</span> dateTime <span class="token operator">=</span> sdf2<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dateTime<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br><br><br><br></p><h2 id="System类的相关属性和方法："><a href="#System类的相关属性和方法：" class="headerlink" title="System类的相关属性和方法："></a>System类的相关属性和方法：</h2><ul><li><p>System.out【out是System类的静态变量】</p></li><li><p>System.outt.println() 【println()方法不是System类的，是PrintStream类的方法】</p></li><li><p>System.gc() 建议启动垃圾回收器</p></li><li><p>System.currentTimeMillis() 获取1970年1月1日到系统当前时间的总毫秒数</p></li><li><p>System.exit(0) 退出JVM</p><p><br><br><br><br></p></li></ul><h2 id="关于数字的格式化"><a href="#关于数字的格式化" class="headerlink" title="关于数字的格式化"></a>关于数字的格式化</h2><p>由于用的是在太少，想了解的点击<a href="https://www.bilibili.com/video/BV1Rx411876f?p=623&amp;spm_id_from=pageDriver%E7%9A%84623%E9%9B%86%EF%BC%8C%E7%AC%94%E8%AE%B0%E5%B0%B1%E4%B8%8D%E5%81%9A%E4%BA%86%E3%80%82">https://www.bilibili.com/video/BV1Rx411876f?p=623&amp;spm_id_from=pageDriver的623集，笔记就不做了。</a></p><p> <br><br><br><br></p><h2 id="BigDecimal"><a href="#BigDecimal" class="headerlink" title="BigDecimal"></a>BigDecimal</h2><ol><li><p>BigDecimal 属于大数据，精度极高。不属于基本数据类型，属于java对象（引用数据类型）。</p><p>这是SUN提供的一个类。专门用在财务软件当中</p></li></ol><ol start="2"><li><p>问：你处理过财务数据吗？用的哪一种类型？</p><p>答：java.math.BigDecimal</p><p><br><br><br><br></p></li></ol><h2 id="随机数"><a href="#随机数" class="headerlink" title="随机数"></a>随机数</h2><ul><li><p>第一种方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Random</span> random<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> num<span class="token operator">=</span>random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//任何数</span><span class="token keyword">int</span> num2<span class="token operator">=</span>random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//0到5任何整数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>第二种方法</p><p>第二种方法返回的数值是[0.0,1.0）的double型数值，由于double类数的精度很高，可以在一定程度下看做随机数，借助（int）来进行类型转换就可以得到整数随机数了，代码如下。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> max<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span>min<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ran2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>max<span class="token operator">-</span>min<span class="token punctuation">)</span><span class="token operator">+</span>min<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ran2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br><br><br><br></p></li></ul><h2 id="枚举："><a href="#枚举：" class="headerlink" title="枚举："></a>枚举：</h2><ol><li>一枚一枚可以列举出来的，才建议使用枚举类型</li><li>枚举编译后产生的也是class文件</li><li>枚举也是一种引用数据类型</li><li>枚举中的每一个值可以看做是常量</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Result</span> r <span class="token operator">=</span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>r<span class="token operator">==</span><span class="token class-name">Result</span><span class="token punctuation">.</span>SUCCESS <span class="token operator">?</span> <span class="token string">"计算成功"</span><span class="token operator">:</span><span class="token string">"计算失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Result</span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">try</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> c <span class="token operator">=</span> a<span class="token operator">/</span>b<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span>SUCCESS<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span>FAIL<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">enum</span> <span class="token class-name">Result</span><span class="token punctuation">&#123;</span>        SUCCESS<span class="token punctuation">,</span>FAIL    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <br><br><br><br></p><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><ol><li><p>什么事异常，java提供异常处理机制有什么用？</p><p>以下程序执行过成功发生了不正常的情况，这种不正常的情况叫做：异常</p><p>java是很完善的语言，提供了异常的处理方式，以下程序执行过程中出现了不正常的情况</p><p>java把改异常信息打印输出到控制糖，供程序员参考。程序员看到异常信息后，可以对程序进行修改，让程序更加健壮。</p><p> <br><br></p></li><li><p>java语言中异常是以什么形式存在的呢？</p><ol><li><p>异常在java中以类的形式存在，每一个异常类都可以创建对象。</p></li><li><p>异常对应的现实生活中是怎么样的</p><p>火灾（异常类）：</p><p>2008年8月8日，小明家着火了（异常对象。</p><p>2008年8月9日，小刚家着火了（异常对象。</p><p>2008年9月8日，小红家着火了（异常对象。</p><br><p>类是：模板</p><p>对象是：实际存在的个体</p><br><p>钱包丢了（异常类）</p><p>2008年1月8日，小明的钱包丢了（异常对象）</p><p> <br><br></p></li></ol></li><li><p>java的异常处理机制：</p><ol><li><p>异常在java中以类和对象的形式存在。那么异常的继承结构是怎么样的？</p><p>我们可以使用UML图来描述一下继承结构。画UML图有很多工具，例如:Rational Rose 、starUML等</p><p>object</p><p>object下有Throwable（可抛出的）</p><p>Throwable下面有两个分支：Error(不可处理，直接退出JVM)和Exception(可处理的)    </p><p>Excepion下面有两个分支</p><ol><li><strong>Exception的直接子类：编译时异常</strong>（要求程序员在编写程序阶段必须预先对这些异常进行处理，如果不处理编译器就会报错，因此得名编译时异常）</li><li><strong>RuntimeException：运行时异常。</strong>（在编写程序阶段程序员可以预先处理也可以不管，都行）</li></ol><br></li><li><p>编译时异常和运行时异常，都是发生在运行阶段，编译阶段异常是不会发生的。</p><p>所有异常都是在运行阶段发生的，因此只有程序运行阶段才可以new对象。</p><p>因此异常的发生就是inew异常对象。</p><br></li><li><p>编译时异常和运行时异常的区别？</p><ol><li><strong>编译时异常一般发生的概率比较高//  又叫受检异常或受控异常</strong></li></ol><ul><li><p>例：你看到外面下雨了，倾盆大雨的。</p><p>你出门之前预料到：如果不打伞，我可能会生病（生病是一种异常）</p><p>而且这个异常发生的概率比较高，所以我们出门之前要拿一把伞。</p><p>“拿一把伞”就是对“生病异常”发生之前的一种处理方式</p></li><li><p>对于一些发生概率较高的异常，需要在运行之前对其进行预处理。</p><br></li></ul><ol start="2"><li><strong>运行时异常一般发生的概率比较低//  又叫未受检异常或非受控异常</strong></li></ol><ul><li><p>例：小明走在大街上，可能会被天上的飞机轮子砸到。</p><p>被飞机轮子砸到也算一种异常。</p><p>但是这种异常发生概率较低。</p><p>在出门之前你没必要提前对这种发生概率较低的异常进行预处理。</p><p>如果你预处理这种异常，你讲获得很累。</p><br></li></ul><ol start="3"><li>假设java中没有对异常进行划分，没有分为：编译时异常和运行时异常，所有异常需要再编写程序阶段对其进行预处理，是怎么样的效果呢？</li></ol><ul><li><p>首先，如果这样的话，程序肯定绝对安全的</p><ul><li>但是程序员编写程序太累的，代码到处都是处理异常的代码。    </li></ul><p><br><br><br><br></p></li></ul></li></ol></li></ol><h3 id="java语言中对异常的处理包括两种方式："><a href="#java语言中对异常的处理包括两种方式：" class="headerlink" title="java语言中对异常的处理包括两种方式："></a>java语言中对异常的处理包括两种方式：</h3><ol><li><p>在方法声明的位置上使用throws关键字，抛给上一级</p><p>谁调用我，我就抛给谁。抛给上一级</p></li><li><p>使用try…catch语句进行异常的捕捉</p><p>这件事发生了，谁也不知道，因为我给抓住了</p><p>举个例子：</p></li></ol><ul><li>我是某集团的一个销售员，因为我的失误，导致公司损失了1000元</li><li>“损失”1000元，可以看做一个异常发生了。我有两种处理方式</li><li>第一种方式：我把这件事告诉领导【异常上抛】</li><li>第二种方式：我自己掏腰包把这钱补上【异常捕捉】</li></ul><p>   <strong>java中异常发生后如果一直上抛，最后抛给了main方法，main方法继续上抛，抛给了调       用者JVM，JVM知道这个异常发生，只有一个结果。终止java程序的执行。</strong></p><p>   注意：只要异常没有捕捉，采用上报的方式，此方法的后续代码不会执行。</p><p>   另外需要注意，try语句块的某一行出现异常，该行后面的代码不会执行。</p><p>   try..catch捕捉后，后续代码可以执行。</p><p>   <br><br></p><h3 id="深入try-catch"><a href="#深入try-catch" class="headerlink" title="深入try..catch"></a>深入try..catch</h3><ol><li><p>catch后面的小括号中的类型可以是具体的异常类型，也可以是该异常类型的父类型。</p></li><li><p>catch可以写多个。建议catch的时候，精确的一个一个处理，这样有利于程序的调试。</p></li><li><p>catch写多个的时候，从上到下，必须遵守从小到大</p><p><br><br></p><h3 id="上报和捕捉的选择："><a href="#上报和捕捉的选择：" class="headerlink" title="上报和捕捉的选择："></a>上报和捕捉的选择：</h3><p>如果希望调用者来处理，选择throws上报</p><p><br><br></p><p>异常对象有两个非常重要的方法：、</p></li><li><p>获取异常简单的描述信息：</p><p>String msg = exception.getMessage();</p></li><li><p>打印异常追踪的栈堆信息：</p><p>exception.printStackTrace();【exception是对象】</p><p> <br><br></p></li></ol><h3 id="关于try-catch中的fianlly子句"><a href="#关于try-catch中的fianlly子句" class="headerlink" title="关于try..catch中的fianlly子句"></a>关于try..catch中的fianlly子句</h3><ol><li><p>在finally子句中的代码是最后执行的，并且是一定会执行，即使try语句块中的代码出现了异常。</p><p>finally子句必须和try一起出现，不能单独编写。</p></li><li><p>finally语句通常使用在哪些情况下呢？</p><p><br><br></p></li></ol><h3 id="java中任何自定义异常"><a href="#java中任何自定义异常" class="headerlink" title="java中任何自定义异常"></a>java中任何自定义异常</h3><p>两步：</p><ol><li>编写一个类继承Exception或者RuntimeException</li><li>提供两个构造方法，一个无参数的，一个带有String</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyException</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">MyException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">MyException</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">MyException</span> e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyException</span><span class="token punctuation">(</span><span class="token string">"用户民不能为空！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//打印异常堆栈信息</span>        <span class="token comment">//获取异常简单描述信息</span>    <span class="token class-name">String</span> msg <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br><br><br><br></p><h2 id="集合概述"><a href="#集合概述" class="headerlink" title="集合概述"></a>集合概述</h2><ol><li><p>什么事集合？有啥用？</p><p>数组其实就是一个集合。集合实际上就是一个容器，可以用来容纳其他类型的数据。</p><p>集合为什么说在开发中使用较多？</p><ul><li><p>集合是一个容器，一个载体，可以一次容纳多个对象，在实际开发中，假设连接数据库，数据库当中有10条记录，那么假设把这10条记录查询出来，在java程序中会将10条数据封装成10个java对象，然后将10个java对象放到某一个集合当中，将集合传动前端，然后遍历集合，将一个数据一个数据展现出来。</p><br></li></ul></li><li><p>集合不能直接存储数据类型，另外集合也不能直接存储java对象，集合当中存储的都是ijava对象的内存地址。（或者说集合中存储的是引用</p><ul><li>list.add(100);//自动装箱Integer</li><li>注意：集合在java中本事是一个容器，也是一个对象。集合在任何时候存储的都是引用。</li></ul><br></li><li><p>在java中年每一个不同的集合，底层会对应不同的数据结构。往不同的集合中存储元素，等于将数组放到了不同的数据结构当中。什么是数据结构？数据存储的结构就是数据结构。不同的数据结构，数据存储的方式不同。例如：</p><ul><li><p>数组、二叉树、链表、哈希表…图</p></li><li><p>以上这些都是常见的数据结构</p></li><li><p>使用不同的集合等同于使用了不同的数据结构。</p></li><li><p>往集合c1中放数据，可能放到数组上了，往集合c2中放数据，可能放到二叉树上了….</p></li><li><p>在这一章节，需要掌握的不是精通数据结构。java中已经将数据结构实现了，已经写好了这些常用的集合类，你只需要掌握掌握怎么用。在什么情况下选择哪一种合适的集合去使用即可。</p></li><li><p>new ArrayList();创建一个集合对象，底层是数组</p></li><li><p>new LinkedList();创建一个集合对象，底层是链表</p></li><li><p>new TreeSet();创建一个集合对象，底层是二叉树 </p><br></li></ul></li><li><p>集合在java JDK中哪个包下？</p><p>java.util.*;  所有的集合类和集合接口都在java.uti包下。 </p></li><li><p>最后能将集合的继承结构图背会。</p><p>集合整个这个体系是怎么样的一个结构，你需要有印象。</p></li><li><p>在java中结合分为两大类</p><ul><li><p>一类是单个方式存储元素：</p><p>单个方式存储元素，这一类集合中超级父接口：java.util.Collection;</p></li><li><p>一类是以键值对儿的方式存储元素，这一类集合中的超级父接口：java.util.Map;</p></li></ul></li></ol><p>​       <br><br> <br><br></p><h2 id="关于java-util-Collection接口中常用的方法"><a href="#关于java-util-Collection接口中常用的方法" class="headerlink" title="关于java.util.Collection接口中常用的方法"></a>关于java.util.Collection接口中常用的方法</h2><ol><li><p>Collection中能存放什么元素？</p><p>没有使用泛型之前，Collection中可以存储Object的所有子类型。</p><p>使用了“泛型”后，Collection中只能存储某个具体的类型。</p><p>集合后期我们会学习“泛型”的语法，目前先不用管。Collction中什么都能存，只要是Object的子类型就行。（集合中不能直接存储基本数据类型，也不能存java对象，只是存储java对象的内存地址。）</p></li><li><p>Collection中的常用方法</p><p><code>boolean add(Object e)</code> 向集合中添加元素</p><p><code>int size()</code> 获取集合中元素的个数</p><p><code>void clear()</code>清空集合</p><p><code>boolean contain(Object o)</code> 判断当前集合中是否包含元素o，包含返回true，不包含返回false</p><p><code>boolean remove(Object 0)</code> 删除集合中的某个元素</p><p><code>boolean isEmpty()</code> 判断集合中元素的个数是否为0</p><p><code>Object[] toArray()</code> 调用这个方法可以把集合转换成数组。</p></li><li><p>迭代集合</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">   <span class="token class-name">Collection</span> c  <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"def"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//进行迭代</span>   <span class="token comment">//第一步，获取集合对象的迭代器对象Iterator</span>   <span class="token class-name">Iterator</span> it <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//第二步，通过以上获取的的迭代器对象开始迭代集合</span>   <span class="token comment">/*   一以下两个方法是迭代器对象Iterator中的方法   boolean hasNext()如果仍有元素可以迭代，则返回true。   Objext next()返回迭代的下一个集合。   */</span>   <span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token class-name">Object</span> obj <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">/*存进去是什么类型，取出来就是什么类型，   只不过输出的时候回转换成字符串。因为println会调用toString()方法。      */</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结重点：</p></li><li><p>把集合继承结构图背会。</p><ol start="2"><li>把Collection接口中常用方法测试几遍</li></ol></li><li><p>把迭代器弄明白</p><ol start="4"><li>Collection接口中的remove方法和contain方法底层都会调用（重写）equals。</li></ol></li></ol><pre><code>&lt;br&gt;&lt;br&gt;</code></pre><h3 id="关于集合元素的remove"><a href="#关于集合元素的remove" class="headerlink" title="关于集合元素的remove"></a>关于集合元素的remove</h3><ul><li><p>重点：当集合的结构发生改变是，迭代器萹蓄重新获取，如果还是用以前老的迭代器，会出现异常：java.util.ConcurrentModificationException</p></li><li><p>重点：在迭代集合元素的过程中，不能调用集合对象的remove方法，删除元素：</p><p>c.remove(0); 迭代过程中不能这样</p><p>否则会出现 java.util.ConcurrentModificationException</p></li><li><p>重点：在迭代元素的过程中，一定要使用迭代器的Itertator的remove方法，删除元素，不要使用集合自带的remove方法。</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">while</span><span class="token punctuation">(</span>it2<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Object</span> o <span class="token operator">=</span> it2<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/*    chu出异常的根本原因：集合中元素删除了，但没有更新迭代器（迭代器不知道集合变化了）    c2.remove(o)； 直接通过集合去删除元素，没有通知迭代器。（导致迭代器的快照和原集合状态不同    */</span>    <span class="token comment">//使用迭代器去删除时，会自动更新迭代器，并且更新集合（删除集合中的元素）</span>   it2<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除的一定是迭代器指向的当前元素</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <br><br> <br><br></p><h2 id="关于java-util-list接口中常用的方法"><a href="#关于java-util-list接口中常用的方法" class="headerlink" title="关于java.util.list接口中常用的方法"></a>关于java.util.list接口中常用的方法</h2><ol><li><p>​      List集合存储元素的特点：有序可重复</p><p>有序：List集合中的元素有下标。</p><p>从0开始，以1递增</p><p>可重复：存储一个1，还可以在存储1</p></li><li><p>List接口既然是Collection接口的子接口，那么肯定List接口有自己的”特色”的方法(以下只列出list特有的，常用的方法)</p><ul><li><code>void add(int index，E element)</code> 在列表的指定位置插入指定元素（第一个参数是下标）（后面的元素依次顺移一位）</li><li><code>Object get(int index)</code> 按下标获取元素</li><li><code>int indexOf(Object o)</code> 返回指定对象第一次出现处的索引</li><li><code>int lastIndexOf(Object o) </code>返回指定对象最后一次出现处的索引</li><li><code>Object remove(int index)</code> 删除指定下标位置的元素</li><li><code>Object set(int index, E element)</code> 修改指定位置的元素</li></ul></li></ol><p> <br><br> <br><br></p><h2 id="ArrayList集合："><a href="#ArrayList集合：" class="headerlink" title="ArrayList集合："></a>ArrayList集合：</h2><ol><li><p>默认初始化容量为10（底层先创建了一个长度为0的数组，当前添加第一个元素的时候初始化容量10）</p></li><li><p>集合底层是一个Object[]数组</p></li><li><p>构造方法：</p><p><code>new ArrayList();</code></p><p><code>new ArrayList(20);</code></p></li><li><p>ArrayList集合的扩容：</p><p>增长到原容量的1.5倍。</p><p>ArrayList集合底层是数组，怎么优化：尽可能少的扩容。因为数组扩容效率比较低，建议在使用ArrayList集合的时候预估元素的个数，给定一个初始化容量。</p></li><li><p>这么多集合中，用哪个集合最多？</p><p>ArrayList集合</p><p>因为往数组末尾添加元素，效率不受影响。</p><p>另外，我们检索、查找某个元素的操作比较多</p></li><li><p>另一个构造方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Collection</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建HashSet集合</span>c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">900</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//通过这个构造方法可以将HashSet结合转换成List集合</span><span class="token class-name">List</span> myList3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> myList3<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p> <br><br> <br><br></p><h2 id="链表："><a href="#链表：" class="headerlink" title="链表："></a>链表：</h2><ul><li><p>优点：</p><p>由于链表上的元素在空间存储上的内存地址不连续。</p><p>所有随记增删元素的时候不会有大量的元素位移，因此随记增删效率较高。</p><p>在以后的开发中，如果遇到随机增删集合中元素的业务比较多时，建议使用LinkedList。</p></li><li><p>缺点：</p><p>不能通过数学表达式计算被查找元素的内存地址，每一次查找都是从头节点开始遍历，直到找到为止。所以LinkedList集合检索、查找的效率较低。</p><br></li><li><p>ArrayList 数组的特点，把检索发挥到机制（但ArrayList是非线程安全的。不是线程安全的集合。）</p></li><li><p>LinkedList 链表特点（双向链表），把随机增删发挥到机制</p><p>LinkedList有初始容量吗？没有</p><p>最初这个链表中没有任何元素。first和last引用都是null</p><p>不管是LinkedList还是ArrayList，以后写代码不需要关心具体是哪个集合。</p><p>因为我们要面向接口编程，调用的方法都是接口中的方法</p><p><br><br> <br><br></p></li></ul><h2 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h2><ol><li><p>底层也是一个数组</p></li><li><p>初始化容量：10</p></li><li><p>怎么扩容的？</p><p>扩容之后是原容量的2倍</p></li><li><p>ArrayList集合扩容特点：</p><p>ArrayList集合扩容是原容量的1.5倍</p></li><li><p>Vector所有方法都是线程同步的，都带有synchronized关键字，是线程安全的。效率比较低，使用较少了。</p></li><li><p>怎么讲一个线程不安全的ArrayList集合转换成线程安全的呢？</p><p>使用集合工具类：</p><p>java.util.Collections;</p><p>java.util.Collection是集合接口；java.util.Collections是集合工具类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span> myList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//非线程安全的</span><span class="token comment">//变成线程安全的</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">synchronizedList</span><span class="token punctuation">(</span>myList<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//myList集合线程就是安全的了</span>myList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"111"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"222"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"333"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <br><br> <br><br></p></li></ol><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><ol><li><p>JDK5.0之后推出的新特性：泛型</p></li><li><p>泛型这种语法机制，只在程序编译阶段起作用，只是给编译器参考的。（运行阶段泛型没用！）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//创建Animal Cat Bird类的代码省略</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Animal</span><span class="token punctuation">></span></span> myList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Animal</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cat c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Bird</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bird</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>myList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*JDK8之后，ArrayList&lt;这里的类型会自动推断>(),前提是JDK8之后才允许自动类型推断，钻石表达式List&lt;Animal> myList = new ArrayList&lt;>();*/</span><span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Animal</span><span class="token punctuation">></span></span> it <span class="token operator">=</span> myList<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Animal</span> a <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用了泛型的好处是什么？</p><ul><li>集合中存储的元素类型同意了。</li><li>从集合中取出的元素类型是泛型指定的类型，不需要进行大量的“向下转型”</li></ul></li><li><p>泛型的缺点是什么？</p><ul><li>导致集合中存储的元素缺乏多样性！</li><li>大多数业务中，集合中元素的类型还是统一的。所以这种·泛型特性被大家所认可</li></ul></li><li><p>自定义泛型可以吗？可以</p><ul><li><p>自定义泛型的时候，&lt;&gt;尖括号中的是一个标识符，随便下。</p></li><li><p>java源代码中经常出现的是：<code>&lt;E&gt;</code>和<code>&lt;T&gt;</code></p><p>E:Element元素</p><p>T:Type类型</p></li></ul><p><br><br> <br><br></p></li></ol><h2 id="增强for循环：foreach"><a href="#增强for循环：foreach" class="headerlink" title="增强for循环：foreach"></a>增强for循环：foreach</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*for(元素类型 变量名 : 数组或集合)&#123; System.out.println(变量名);&#125;*/</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> data <span class="token operator">:</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//data就是数组中的元素</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <br><br> <br><br></p><h2 id="Set下的子类"><a href="#Set下的子类" class="headerlink" title="Set下的子类"></a>Set下的子类</h2><ul><li><p>HashSet集合：无序不可重复</p></li><li><p>TreeSet集合存储元素的特点：</p><ol><li><p>无序不可重复，但是存储的元素可以自动按照大小顺序排序！ </p><p>称为：可排序集合</p></li><li><p>无序：这里的无序指的是存进去的顺序和取出来的顺序不同。并且没有下标</p><p><br><br> <br><br></p></li></ol></li></ul><h2 id="java-util-Map接口中常用的方法"><a href="#java-util-Map接口中常用的方法" class="headerlink" title="java.util.Map接口中常用的方法"></a>java.util.Map接口中常用的方法</h2><ol><li><p>Map和Collection没有继承关系</p></li><li><p>Map集合以 key 和 value 的方式存储数据：键值对</p><p>key和value都是引用数据类型，都是存储对象的内存地址</p><p>key起到主导地位，value是key的一个附属品</p></li><li><p>Map接口中常用方法</p><ul><li><p><code>V put(K key，V vaLue)</code> 向Map集合中添加键值对</p></li><li><p><code>V get(Object key)</code>  通过key获取vaLue</p></li><li><p><code>void clear()</code> 清空Map集合</p></li><li><p><code>boolean containsKey(Object key)</code> 判断Map中是否包含某个key</p></li><li><p><code>boolean containsVaLue(Object vaLue)</code> 判断Map中是否包含某个value</p></li><li><p><code>boolean isEmpty()</code> 判断Map集合中元素个数是否为0</p></li><li><p><code>Set&lt;K&gt; keySet()</code> 获取Map集合所有的key（所有的键是个set集合）</p></li><li><p><code>V remove(Object key)</code>通过key删除键值对</p></li><li><p><code>int size()</code>获取Map集合中键值对的个数</p></li><li><p><code>ColLection&lt;V&gt; vaLues()</code> 获取Map集合中所有的value，返回一个Collection</p><br></li><li><p><code>Set&lt;Map.Entry&lt;K,V&gt;&gt; entry Set()</code> 将Map集合转换成set集合</p><p>例：<code>Set&lt;Map.Entry&lt;Integer,String&gt;&gt; set = map.entry Set()</code> </p><p>假设现在有有一个Map集合 “map1”</p><p>Set set = map1.entrySet();</p><p>【注意：Map集合通过entrySet()方法转换成的这个Set集合，Set集合中元素的类型是Map.Entry&lt;K,V&gt;】</p><p>【Map.Entry和String一样，都是一种类的名字，只不过：Map.Entry是静态内部类，是Map中的静态内部类】</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token class-name">SelfTest</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashSet</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Set</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Myclass</span><span class="token punctuation">&#123;</span>    <span class="token comment">//声明一个静态内部类</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">InnerClass</span><span class="token punctuation">&#123;</span>        <span class="token comment">//静态方法</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"静态内部类的m1方法实行"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//实例方法</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"静态内部类中的实例方法执行！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//类名叫做：MyClass.InnerClass</span>        <span class="token class-name">Myclass</span><span class="token punctuation">.</span><span class="token class-name">InnerClass</span><span class="token punctuation">.</span><span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建静态内部类对象</span>        <span class="token class-name">Myclass</span><span class="token punctuation">.</span><span class="token class-name">InnerClass</span> mi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Myclass</span><span class="token punctuation">.</span><span class="token class-name">InnerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mi<span class="token punctuation">.</span><span class="token function">m2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//给一个Set集合</span>        <span class="token comment">//该Set集合中存储的对象是Myclass.InnerClass类型</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Myclass</span><span class="token punctuation">.</span><span class="token class-name">InnerClass</span><span class="token punctuation">></span></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//这个Set集合中存储的是字符串对象</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> set2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MyMap</span><span class="token punctuation">.</span><span class="token class-name">MyEntry</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">></span></span> set3<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">MyMap</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ol><ol start="4"><li><p>遍历Map集合（重点！！！）遍历集合</p><ul><li><p>第一种方式：</p><p>获取所有·的key，通过遍历key，来遍历value</p><p>获取所有key，所有key是一个Set集合</p><p><code>Set&lt;Integer&gt; keys = map.keySet();</code></p><p>通过key获取value</p></li><li><p>第二种方式：</p><p><code>Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet()</code></p><p>以上方法就是把Map集合直接全部转换成Set集合</p><p>Set集合中的元素的类型是：Map.Entry</p><br></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token class-name">SelfTest</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Iterator</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Set</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MapTest01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"zs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"ls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"ww"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">"zl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/**         * 第一种方法 获取所有key，所有key是一个Set集合         */</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> keys <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//foreach</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span> key<span class="token operator">:</span> keys<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//迭代器</span>        <span class="token class-name">Iterator</span> it <span class="token operator">=</span> keys<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">Object</span> o <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">/**         * 第二种方法 把Map集合直接全部转换成Set集合         */</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token class-name">Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">></span></span> set <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将Map集合变成Set集合</span>        <span class="token comment">//迭代器</span>        <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token class-name">Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">></span></span> it2 <span class="token operator">=</span> set<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>it2<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">></span></span> node <span class="token operator">=</span> it2<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Integer</span> key <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> value <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key<span class="token operator">+</span><span class="token string">"="</span><span class="token operator">+</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//foreach</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">></span></span> node <span class="token operator">:</span> set<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"="</span><span class="token operator">+</span>node<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br><br> <br><br></p></li></ol><h2 id="HshMap集合"><a href="#HshMap集合" class="headerlink" title="HshMap集合"></a>HshMap集合</h2><ol><li><p>HashMap集合底层是哈希表/散链表数据结构</p></li><li><p>哈希表是一个怎样的数据结构？</p><p>哈希表是一个数组和单向链表的结合体</p></li><li><p>HashMap集合的key部分特点：</p><p>无序，不可重复</p><p>为什么无序？因为不一定挂到哪个单向链表上。</p><p>不可重复是怎么保证的？equals方法来保证HashMap集合的key不可重复。</p><p>如果key重复了，value会覆盖</p><br><p>放在HashMap集合key部分的元素其实就是放到HashSet集合中了。</p><p>所以HashSet集合中的元素也需要同时重写hashCode()+equals()方法</p></li><li><p>哈希表HashMap使用不当时无法发挥性能！</p><p>要求散列分布均匀，需要你重写hashCode()方法时有一定的技巧。</p></li><li><p>重点：放在HashMap集合key部分的元素，以及放在HashSet集合中的元素，同时重写equals方法和hashCode方法</p></li><li><p>HashMap集合的默认初始化容量为16，默认加载因子是0.75</p><p>这个默认加载因子是当HashMap集合底层数组的容量达到75%的时候，数组开始扩容，扩容之后是原容量的2倍</p><p>重点：HashMap初始化容量必须是2的倍数，这是为了散列分布均匀，提高HashMap集合的存储效率，所必须的。</p><p><br><br></p></li></ol><h3 id="HashMap的equals方法和hashCode方法重写"><a href="#HashMap的equals方法和hashCode方法重写" class="headerlink" title="HashMap的equals方法和hashCode方法重写"></a>HashMap的equals方法和hashCode方法重写</h3><ol><li><p>向Map集合中存以及取，都是先调用key的hashCode方法，然后再调用equals方法！</p><p>equals方法有可能调用，也有可能不调用</p><p>比如put(k,v):k.hashCode()方法返回哈希值，哈希值经过哈希算法转换成下标，数组下标位置如果是null，equals不需要执行，get(k)方法同理</p></li><li><p>注意：如果一个类的equals方法重写了，那么hashCode()方法必须重写。</p><p>并且equals方法返回如果是true，HashCode()方法返回的值必须一样。</p><ul><li>equals方法返回true表示两个对象相同，在同一个单向链表上比较，那么对于同一个单向链表的节点来说，他们的哈希值是相同的，所以hashCode()方法返回值也应该相同</li></ul></li><li><p>hashCode()方法和equals()方法不用研究了，直接使用IDEA工具生成，不过这两个方法需要同时生成</p></li><li><p>对于哈希表数据结构来说：</p><p>如果o1和o2的值先沟通，一定是放在同一个单向链表上。</p><p>当然如果o1和o2的hash值不同，但由于哈希算法，执行结束之后转换的数组下标可能相同，此时会发生“哈希碰撞”</p></li><li><p>终极结论：放在HashMap集合key部分，以及方法HashSet集合中的元素，需要同时重写hashCode方法和equals方法。</p><p><br><br> <br><br></p></li></ol><h2 id="Properties类"><a href="#Properties类" class="headerlink" title="Properties类"></a>Properties类</h2><ul><li><p>目前只需要掌握Properties属性类对象的相关方法即可。</p></li><li><p>Properties是一个Map集合，继承Hashtable，Properties的key和value都是String类型</p></li><li><p>Properties被称为属性类对象</p></li><li><p>Properties是线程安全的</p></li><li><p>需要掌握Properties的两个方法，一个存一个取</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token class-name">SelfTest</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Properties</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PropertiesTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//创建一个Properties对象</span>        <span class="token class-name">Properties</span> pro <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//存</span>        pro<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"zd"</span><span class="token punctuation">,</span><span class="token string">"nb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pro<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"xjb"</span><span class="token punctuation">,</span><span class="token string">"sb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//通过key获取value</span>        <span class="token class-name">String</span> zd <span class="token operator">=</span> pro<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"zd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> xjb <span class="token operator">=</span> pro<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"xjb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>zd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>xjb<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br><br> <br><br></p></li></ul><h2 id="TreeSet和TreeMap"><a href="#TreeSet和TreeMap" class="headerlink" title="TreeSet和TreeMap"></a>TreeSet和TreeMap</h2><ol><li><p>TreeSet集合底层实际上是一个TreeMap</p></li><li><p>TreeMap集合底层是一个二叉树</p></li><li><p>放在TreeSet集合中的元素，等同于放到TreeMap集合key部分了</p></li><li><p>TreeSet集合中的元素：无序不可重复，但是可以按照元素的大小顺序自动排序（升序）。</p><p>称为：可排序集合</p></li><li><p>TreeSet无法对自定义类型排序</p><ul><li><p>放在TreeSet集合中的元素需要实现java.lang.Comparable接口</p></li><li><p>并且实现compareTo方法，equals可以不写</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Customer</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Customer</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">Customer</span> c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>怎么写比较规则</p><p>compareTo方法的返回值很重要：</p><p>返回0表示相同，value会覆盖</p><p>返回&gt;0，会继续在右子树上找，</p><p>返回&lt;0，会继续在左子树上找。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>vip v<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">==</span>v<span class="token punctuation">.</span>age<span class="token punctuation">&#123;</span>     <span class="token comment">//年龄相同时按照名字排序</span>     <span class="token comment">//姓名是String类型，可以直接比。调用compareTo来完成比较</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">-</span> v<span class="token punctuation">.</span>age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>实现比较器接口</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token class-name">SelfTest</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Comparator</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">TreeSet</span><span class="token punctuation">;</span><span class="token comment">//Tree集合中元素课排序的第二种方式：使用比较器</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TreeMapTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//创建Tree集合的时候，需要使用这个比较器</span>        <span class="token comment">//通过构造方法传递一个比较器进去</span>        <span class="token comment">//给构造方法传递一个比较器</span>        <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WuGui</span><span class="token punctuation">></span></span> wuGuis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WuGuiComparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                wuGuis<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WuGui</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        wuGuis<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WuGui</span><span class="token punctuation">(</span><span class="token number">800</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        wuGuis<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WuGui</span><span class="token punctuation">(</span><span class="token number">810</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">WuGui</span> wuGui<span class="token operator">:</span>wuGuis<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>wuGui<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">WuGui</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">WuGui</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">WuGui</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">=</span>age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"WuGui&#123;"</span> <span class="token operator">+</span>                <span class="token string">"age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token string">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//单独在这里编写一个比较器</span><span class="token comment">//比较器实现java.util.Comparator接口。（Comparable是java.lang包下的  。Comparator是java1。util包下的。Comparable是第一种方式）</span><span class="token keyword">class</span> <span class="token class-name">WuGuiComparator</span> <span class="token keyword">implements</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WuGui</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> compare <span class="token punctuation">(</span><span class="token class-name">WuGui</span> o1<span class="token punctuation">,</span><span class="token class-name">WuGui</span> o2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> o1<span class="token punctuation">.</span>age<span class="token operator">-</span>o2<span class="token punctuation">.</span>age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><pre><code class="java">/*使用匿名内部类的方式，作用和上面一样*/package SelfTest;import java.util.Comparator;import java.util.TreeSet;//Tree集合中元素课排序的第二种方式：使用比较器public class TreeMapTest &#123;    public static void main(String[] args) &#123;        //创建Tree集合的时候，需要使用这个比较器        //通过构造方法传递一个比较器进去        //给构造方法传递一个比较器,匿名内部类        TreeSet&lt;WuGui&gt; wuGuis = new TreeSet&lt;&gt;(new Comparator&lt;WuGui&gt;() &#123;            @Override            public int compare(WuGui o1, WuGui o2) &#123;                return o1.age-o2.age;            &#125;        &#125;);</code></pre></li></ul></li></ol><pre><code>         wuGuis.add(new WuGui(1000));         wuGuis.add(new WuGui(800));         wuGuis.add(new WuGui(810));         for(WuGui wuGui:wuGuis)&#123;             System.out.println(wuGui);         &#125;     &#125; &#125; class WuGui&#123;     int age;     public WuGui() &#123;     &#125;     public WuGui(int age)&#123;         this.age=age;     &#125;     @Override     public String toString() &#123;         return &quot;WuGui&#123;&quot; +                 &quot;age=&quot; + age +                 &#39;&#125;&#39;;     &#125; &#125; ```</code></pre><ol start="6"><li><p>最终结论：放TreeSet或者TreeMap集合key部分的元素要想做到排序，包括以下两种方式：</p><ol><li>放在集合中的元素实现java.lang.Comparable接口</li><li>在构造TreeSet或者TreeMap集合的时候给它传一个比较器对象</li></ol></li><li><p>Comparable和Comparator怎么选择呢？</p><ul><li><p>当比较规则不会发生改表的时候。或者说比较规则只有一个的时候，建议实现Comparable接口</p></li><li><p>如果比较规则有多个，并且是需要多个比较规则之间频繁切换，建议使用Comparator接口</p><p>Comparator接口的设计符合OCP原则</p></li></ul><p><br><br> <br><br></p></li></ol><h2 id="Collections工具类"><a href="#Collections工具类" class="headerlink" title="Collections工具类"></a>Collections工具类</h2><p>注意：java.util.Collection 集合接口；java.util.Collections集合工具类，方便集合的操作</p><p> <br><br> <br><br></p><h2 id="IO流，什么是IO"><a href="#IO流，什么是IO" class="headerlink" title="IO流，什么是IO?"></a>IO流，什么是IO?</h2><ul><li><p>I:input ; O:output</p></li><li><p>java IO流这块有四大家族：</p><p>四大首领：</p><p>java.io.InputStream 字节输入流</p><p>java.io.OutputStream 字节输出流</p><br><p>java.io.Reader 字符输入流</p><p>java.io.Writer 字符输出流</p><br><p>四大家族的首领都是抽象类。（abstract class）</p></li><li><p><strong>所有流</strong>都实现了：java.io.Closeable接口，都是可关闭，都有close（）方法。</p><p>养成好习惯，用完流一定要关闭。</p></li><li><p><strong>所有的输出流</strong>都实现了java.io.Flushable接口，都是可刷新的，都有flush()方法。养成好习惯，输出流在最终输出之后，一定要记得flush()刷新一下，表示将通道、管道当中剩余未输出的数据，强行输出玩（清空管道！）刷新的作用就是清空管道。</p><p>如果没有flush()可能会导致丢失数据</p></li><li><p><strong>注意：在java中只要“类名”以Stream结尾的都是字节流。以”Reader/Writer”结尾的都是字符流</strong>    </p></li><li><p>java.io包下需要掌握的流有16个：</p><p><strong>文件专属</strong>：</p><p>java.io.FileInputstream</p><p>java.io.FileOutputstream</p><p>java.io.FileReader</p><p>java.io.FileWriter</p><br><p><strong>转换流</strong>：（将字节流转换成字符流）</p><p>java.io.InputStreamReader</p><p>java.io.OutputStreamWriter</p><br><p><strong>缓冲流专属</strong>：</p><p>java.io.BufferedReader</p><p>java.io.BufferedWriter</p><p>java.io.BufferedInputStream</p><p>java.io.BufferedOutputStream</p><br><p><strong>数据流专属</strong>：</p><p>java.io.DataInputStream</p><p>java.io.DataOutputStream</p><br><p><strong>标准输出流</strong>：</p><p>java.io.PrintWriter</p><p>java.io.PrintStream</p><br><p><strong>对象专属流</strong>：</p><p>java.io.ObjectInputStream</p><p>java.io.ObjectOutputStream</p></li></ul><p> <br><br> </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;IDEA使用&quot;&gt;&lt;a href=&quot;#IDEA使用&quot; class=&quot;headerlink&quot; title=&quot;IDEA使用&quot;&gt;&lt;/a&gt;IDEA使用&lt;/h2&gt;&lt;h3 id=&quot;新建&quot;&gt;&lt;a href=&quot;#新建&quot; class=&quot;headerlink&quot;</summary>
      
    
    
    
    <category term="java" scheme="http://lcdzzz.github.io/categories/java/"/>
    
    
    <category term="2021寒假自学笔记" scheme="http://lcdzzz.github.io/tags/2021%E5%AF%92%E5%81%87%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>常见的DOS命令</title>
    <link href="http://lcdzzz.github.io/2021/01/18/chang-jian-de-dos-ming-ling/"/>
    <id>http://lcdzzz.github.io/2021/01/18/chang-jian-de-dos-ming-ling/</id>
    <published>2021-01-18T07:22:04.169Z</published>
    <updated>2021-01-20T05:58:45.036Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>打开DOS命令窗口：</p><p>开始菜单–&gt;运行–&gt;输入cmd–&gt;回车/win+r</p></li><li><p>常见的DOS命令：</p><ol><li><p>cls 清屏。</p></li><li><p>DOS窗口怎么复制：选中复制内容后在任意位置点击鼠标右键，此时内容已经在剪切板了。</p></li><li><p>dir 列出当前目录下所有的子文件/子目录。</p></li><li><p>cd 命令</p><ul><li><p>cd命令表示：change directory。</p></li><li><p>怎么用：cd 目录的路径。</p></li><li><p>cd.. 回到上级目录。</p></li><li><p>cd\ 直接回到根目录。</p></li><li><p>怎么切换盘符：</p><p>d:回车。</p></li></ul></li></ol></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;p&gt;打开DOS命令窗口：&lt;/p&gt;
&lt;p&gt;开始菜单–&amp;gt;运行–&amp;gt;输入cmd–&amp;gt;回车/win+r&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;常见的DOS命令：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;cls 清屏。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;DOS窗口怎么</summary>
      
    
    
    
    
    <category term="2021寒假自学笔记" scheme="http://lcdzzz.github.io/tags/2021%E5%AF%92%E5%81%87%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>acm部分做题记录</title>
    <link href="http://lcdzzz.github.io/2020/11/28/acm-bu-fen-zuo-ti-ji-lu/"/>
    <id>http://lcdzzz.github.io/2020/11/28/acm-bu-fen-zuo-ti-ji-lu/</id>
    <published>2020-11-28T13:18:55.888Z</published>
    <updated>2021-02-01T06:49:10.616Z</updated>
    
    <content type="html"><![CDATA[<h2 id="hdoj-2036改革春风吹满地"><a href="#hdoj-2036改革春风吹满地" class="headerlink" title="hdoj 2036改革春风吹满地"></a>hdoj 2036改革春风吹满地</h2><ul><li>简述：（变成一般问题的话）一个多边形告诉你边数（定点数）为n，然后是按照逆时针顺序给出的n个顶点的坐标（x1, y1, x2, y2… xn, yn），然后求他的面积。</li></ul><p>这题最简单最快的方法就是叉乘法（原理不懂不要紧，记住公式，反正很容易记）</p><p>部分代码实现</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> t <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                s <span class="token operator">=</span> s<span class="token operator">+</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> b<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">-</span> a<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">*</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2.0</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这当中，数组a代表x坐标，数组b代表y坐标，从i=0（第一个点）叉乘到i=n-1（最后一个点）</p><p>这些点是逆时针顺序的，如果是顺时针，那么求出来的值是负数，就要在前面加一个绝对值<code>Math.abs</code></p><p>上面代码翻译成数学就是:</p><p>s = [（x1 * y2 - x2 * y1）+（x2 * y3 - x3 * y2) + ….. + (x(n - 2) * y(n - 1)-x(n - 1) * y(n - 2))+(x(n-1) * y0 - x0 * y(n-1)) ]/2.0</p><p>接下来就是喜闻乐见的整体代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">       <span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token punctuation">;</span>                  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Scanner</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>in<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">int</span> n <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">int</span>  <span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span> <span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span>  <span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span> <span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">double</span> s <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> t <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                s <span class="token operator">=</span> s<span class="token operator">+</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> b<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">-</span> a<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">*</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2.0</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token comment">//s</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br><br><br><br></p><h2 id="hdoj2045动态规划"><a href="#hdoj2045动态规划" class="headerlink" title="hdoj2045动态规划"></a>hdoj2045动态规划</h2><p>题目链接：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=2045"></a></p><p>【动态规划】:把多阶段过程转化为一系列单阶段问题，利用各阶段之间的关系，<br>逐个求解，创立了解决这类过程优化问题的新方法——动态规划。</p><ul><li><p>思路：设f(n)代表当有n个方格时，满足条件的涂法</p><p>易知：f(1)=3;f(2)=6; f(3)=6;</p><ul><li>假设第n-1个格子的颜色跟第1个相同，<br> 因为第n-1个格子颜色已确定，第n个格子可以涂的颜色有两种，<br> 故为2*f(n-2)</li></ul><p>​                    怎么理解:    以n=4时为例</p><ul><li><u>R G</u> R (P/G) 下划线两个，代表f(2),因为在第1个和第3个相同，所以相当于第3个也已经确定了 。所以是f(2)*2</li><li><u>R G P</u> (G)  下划线三个，代表f(3),因为第1个和第3个不同，留个第4位的只有一个选择了，所以是f(3)*1</li></ul></li><li><p>答案：</p></li></ul><p>​      </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">long</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">long</span> <span class="token punctuation">[</span><span class="token number">51</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">50</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">2</span><span class="token operator">*</span>a<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>       <span class="token class-name">Scanner</span> in  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>in<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">int</span> n<span class="token operator">=</span>in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br><br><br><br></p><h2 id="进制转换加运算"><a href="#进制转换加运算" class="headerlink" title="进制转换加运算"></a>进制转换加运算</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Scanner</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>in<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> num_01 <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> num_02 <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//1.先将字符串转为十六进制,十六进制转为十进制</span>            <span class="token keyword">long</span> result <span class="token operator">=</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">parseLong</span><span class="token punctuation">(</span>num_01<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">+</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">parseLong</span><span class="token punctuation">(</span>num_02<span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>result<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;hdoj-2036改革春风吹满地&quot;&gt;&lt;a href=&quot;#hdoj-2036改革春风吹满地&quot; class=&quot;headerlink&quot; title=&quot;hdoj 2036改革春风吹满地&quot;&gt;&lt;/a&gt;hdoj 2036改革春风吹满地&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;简述：（变成一般</summary>
      
    
    
    
    <category term="acm" scheme="http://lcdzzz.github.io/categories/acm/"/>
    
    
  </entry>
  
  <entry>
    <title>java语法随记</title>
    <link href="http://lcdzzz.github.io/2020/11/25/java-yu-fa-sui-ji/"/>
    <id>http://lcdzzz.github.io/2020/11/25/java-yu-fa-sui-ji/</id>
    <published>2020-11-25T11:59:11.214Z</published>
    <updated>2021-02-11T06:36:05.655Z</updated>
    
    <content type="html"><![CDATA[<h2 id="java-math-BigDecimal的用法"><a href="#java-math-BigDecimal的用法" class="headerlink" title="java.math.BigDecimal的用法"></a>java.math.BigDecimal的用法</h2><ol><li><p>BigDecimal类型用来存储金额等有小数，需要精度的数据</p></li><li><p>BigDecimal不能直接使用int类型赋值！</p></li><li><p>两种使BigDecimal初始化为0的方法:<br>BigDecimal a=BigDecimal<br>BigDecimal b=new BigDecimal(0);<br>BigDecimal a = in.nextBigDecimal();</p><ul><li>除法运算：</li></ul><p>​      <code>System.out.println(new BigDecimal(153.5).divide(new BigDecimal(100), 2, BigDecimal.ROUND_HALF_UP));</code></p><p>　  //new BigDecimal(100)除数，2精确的位数，BigDecimal.ROUND_HALF_UP：舍入模式</p><ul><li><p>加法运算：</p><p><code>System.out.println(new BigDecimal(&quot;2.005&quot;).add(new BigDecimal(&quot;0.03&quot;)));</code></p></li><li><p>减法运算：</p><p><code>System.out.println(new BigDecimal(&quot;2.00&quot;).subtract(new BigDecimal(&quot;1.10&quot;)));</code></p></li><li><p>乘法运算：</p><p><code>System.out.println(new BigDecimal(&quot;2.05&quot;).multiply(new BigDecimal(&quot;10&quot;)));</code></p></li></ul></li></ol><p><br><br><br><br></p><h2 id="char-SS-s-toCharArray"><a href="#char-SS-s-toCharArray" class="headerlink" title="char [] SS = s.toCharArray();"></a>char [] SS = s.toCharArray();</h2><ul><li><p><code>char [] SS = s.toCharArray();</code></p><p>//把字符串中的每个字符放进ss的字符数组里</p><p><br><br><br><br></p></li></ul><h2 id="s-contains-“4”-s-contains-“62”"><a href="#s-contains-“4”-s-contains-“62”" class="headerlink" title="s.contains(“4”)||s.contains(“62”)"></a>s.contains(“4”)||s.contains(“62”)</h2><ul><li><p><code>(s.contains(&quot;4&quot;)||s.contains(&quot;62&quot;)</code></p><p>//判断s字符串里有没有包含”4”或”62”</p></li></ul><p><br><br><br><br></p><h2 id="java自定义函数调用"><a href="#java自定义函数调用" class="headerlink" title="java自定义函数调用"></a>java自定义函数调用</h2><h3 id="一：主类中的自定义函数"><a href="#一：主类中的自定义函数" class="headerlink" title="一：主类中的自定义函数"></a>一：主类中的自定义函数</h3><p>在主类中，如果想要在main函数中调用自定义的其他方法，则这个函数需要使用<u>static关键字</u>定义，否则会报错Cannot make a static reference to the non-static method xx from the type xx，调用的时候<u>直接用函数名</u>就可以了，如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">class</span> create_function <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>　　<span class="token keyword">int</span> s <span class="token operator">=</span> <span class="token function">jia</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">jia</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是自定义相加函数，我被调用了！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>               <span class="token punctuation">&#125;</span>     <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面使用static关键字定义了一个“+”运算的函数，在main中调用时，直接使用函数名，括号中加参数就可以了。输出结果如下：</p><p>​        我是自定义相加函数，我被调用了！！<br>​        9</p><p><br><br></p><h3 id="二：自定义类中函数的调用"><a href="#二：自定义类中函数的调用" class="headerlink" title="二：自定义类中函数的调用"></a>二：自定义类中函数的调用</h3><p>自定义类中函数的调用有两种情况，静态函数和非静态函数，<u>非静态函数的调用需要先声明一个类实例，通过实例调用</u>。静态函数的调用可以通过实例，也可以直接使用类名调用(建议使用这种，要不会造成内存空间的浪费。)，如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> create_function <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token class-name">Y</span> y <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Y</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">int</span> s2 <span class="token operator">=</span> y<span class="token punctuation">.</span><span class="token function">cheng</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//声明了y这个实例</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//直接用Y这个类调用</span>                <span class="token keyword">int</span> s3 <span class="token operator">=</span> <span class="token class-name">Y</span><span class="token punctuation">.</span><span class="token function">chu</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Y</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> <span class="token function">cheng</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是自定义类中的乘方法，我被调用了！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> a<span class="token operator">*</span>b<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">chu</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token punctuation">,</span><span class="token keyword">int</span> d<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是自定义类中的除方法，我被调用了！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> c<span class="token operator">/</span>d<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在下面，自定义了一个Y类，cheng方法是非静态方法，必须通过实例y调用，chu方法是静态方法，使用类名直接调用。输出结果如下：</p><p>​        我是自定义类中的乘方法，我被调用了！<br>​        15<br>​        我是自定义类中的除方法，我被调用了！<br>​        4</p><p><br><br><br><br></p><h2 id="String-valueOf-方法的使用"><a href="#String-valueOf-方法的使用" class="headerlink" title="String.valueOf()方法的使用"></a>String.valueOf()方法的使用</h2><h3 id="一：由基本数据形态转换成String"><a href="#一：由基本数据形态转换成String" class="headerlink" title="一：由基本数据形态转换成String"></a>一：由基本数据形态转换成String</h3><p>String 类别中已经提供了将基本数据型态转换成 String 的 static 方法 ，也就是 <strong>String.valueOf()</strong> 这个参数多载的方法 ：</p><p>（1）<strong>String.valueOf(boolean b)</strong> : 将 boolean 变量 b 转换成字符串<br>（2）<strong>String.valueOf(char c)</strong> : 将 char 变量 c 转换成字符串<br>（3）<strong>String.valueOf(char[] data)</strong> : 将 char 数组 data 转换成字符串<br>（4）<strong>String.valueOf(char[] data, int offset, int count)</strong> : 将 char 数组 data 中 由 data[offset] 开始取 count 个元素 转换成字符串 </p><p>（5）<strong>String.valueOf(double d)</strong> : 将 double 变量 d 转换成字符串<br>（6）<strong>String.valueOf(float f)</strong> : 将 float 变量 f 转换成字符串<br>（7）<strong>String.valueOf(int i)</strong> : 将 int 变量 i 转换成字符串<br>（8）<strong>String.valueOf(long l)</strong> : 将 long 变量 l 转换成字符串<br>（9）<strong>String.valueOf(Object obj)</strong> : 将 obj 对象转换成 字符串, 等于 obj.toString() </p><p>　　<strong>用法如下:</strong><br>　　<code>int i = 10;</code><br>　　<code>String str = String.valueOf(i);</code><br>　　这时候 str 就会是 “10” </p><p><br><br></p><h3 id="二、-由-String-转换成-数字的基本数据型态"><a href="#二、-由-String-转换成-数字的基本数据型态" class="headerlink" title="二、 由 String 转换成 数字的基本数据型态"></a><strong>二、 由 String 转换成 数字的基本数据型态</strong></h3><p>要将 String 转换成基本数据型 ，大多需要使用基本数据型态的包装类别 </p><p>（1） <strong>Byte.parseByte(String s)</strong> : 将 s 转换成 byte </p><p>（2）<strong>Byte.parseByte(String s, int radix)</strong> : 以 radix 为基底（进制基数） 将 s 转换为 byte ，比如说 Byte.parseByte(“11”, 16) 会得到 17。</p><p>（3） <strong>Double.parseDouble(String s)</strong> : 将 s 转换成 double </p><p>（4） <strong>Double.parseFloat(String s)</strong> : 将 s 转换成 float </p><p>（5） <strong>Integer.parseInt(String s)</strong> : 将 s 转换成 int </p><p>（6） <strong>Long.parseLong(String s)</strong> : 将 s 转换成 long</p><h2 id="终止程序的执行，退出JVM"><a href="#终止程序的执行，退出JVM" class="headerlink" title="终止程序的执行，退出JVM"></a>终止程序的执行，退出JVM</h2><blockquote><p>system.exit(0);</p></blockquote><p><br><br><br><br></p><h2 id="强行转换类型（强制类型转换-向下转型）"><a href="#强行转换类型（强制类型转换-向下转型）" class="headerlink" title="强行转换类型（强制类型转换/向下转型）"></a>强行转换类型（强制类型转换/向下转型）</h2><p>调用子类中特有的方法是，需要向下转型</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>c <span class="token keyword">instanceof</span> <span class="token class-name">D</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//c指向的对象如果确实是一个D类型的</span>     <span class="token class-name">D</span> d1<span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">D</span><span class="token punctuation">)</span>c<span class="token punctuation">;</span>    d1<span class="token punctuation">.</span><span class="token function">doOther</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//doOther是D类特有的方法</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br><br><br><br></p><h2 id="局部变量和成员变量"><a href="#局部变量和成员变量" class="headerlink" title="局部变量和成员变量"></a>局部变量和成员变量</h2><p>局部变量是没有初始值的</p><p>成员变量有初始值（0  0.0  null）</p><p><br><br><br><br></p><h2 id="next部分相关用法"><a href="#next部分相关用法" class="headerlink" title="next部分相关用法"></a>next部分相关用法</h2><ol><li><p>nextInt()它只读取int值，nextInt()在读取输入后将光标放在同一行。</p></li><li><p>next()只读取输入直到空格。它无法阅读两个被空格隔开的单词。</p><p>同样，next()在读取输入后将光标放在同一行中。</p></li><li><p>nextLine()读取包括单词之间的空格在内的输入(也就是说，读取到行n的末尾)。<br>读取输入后，nextLine()将光标定位到下一行。</p></li></ol><p><br><br><br><br></p><h2 id="java中，按数组下标来输出内容"><a href="#java中，按数组下标来输出内容" class="headerlink" title="java中，按数组下标来输出内容"></a>java中，按数组下标来输出内容</h2><p><code>System.out.println(line.substring(6,11));</code><br>意思是：输出line字符串中下标6到11的字符</p><p><br><br><br><br></p><h2 id="怎么把一个变量塞到一个字符串当中"><a href="#怎么把一个变量塞到一个字符串当中" class="headerlink" title="怎么把一个变量塞到一个字符串当中"></a>怎么把一个变量塞到一个字符串当中</h2><p>口诀：<strong>加一个引号，双引号中间加两个加号，两个加号之间加变量名</strong></p><p>例如:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">return</span> <span class="token string">" [ "</span><span class="token operator">+</span>no<span class="token operator">+</span><span class="token string">",单人间，空闲] "</span>；<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><br><br><br><br></p><h2 id="三目运算符"><a href="#三目运算符" class="headerlink" title="三目运算符"></a>三目运算符</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java">status <span class="token operator">?</span> <span class="token string">"空闲"</span> <span class="token operator">:</span> <span class="token string">"占用"</span><span class="token punctuation">;</span><span class="token comment">/**如果status是true，那么输出空闲，否则就输出占用*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><br><br><br><br></p><h2 id="println-引用-，会自动调用引用toString-方法"><a href="#println-引用-，会自动调用引用toString-方法" class="headerlink" title="println(引用)，会自动调用引用toString()方法"></a>println(引用)，会自动调用引用toString()方法</h2><p><br><br><br><br></p><h2 id="arrays工具-排序和二分法查找"><a href="#arrays工具-排序和二分法查找" class="headerlink" title="arrays工具(排序和二分法查找)"></a>arrays工具(排序和二分法查找)</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> main <span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">434</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">232</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">67</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//排序</span><span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">binarySearch</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3是所要查询的数据，arr是查询的对象（数组）</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>index<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">?</span> <span class="token string">"该元素不存在"</span> <span class="token operator">:</span> <span class="token string">"该元素下标是："</span> <span class="token operator">+</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="类和接口的强制类型转换"><a href="#类和接口的强制类型转换" class="headerlink" title="类和接口的强制类型转换"></a>类和接口的强制类型转换</h2><p>类在强制类型转换过程中，如果是类转换成接口类型。那么类和接口之间不需要存在继承关系，也可以转换    </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;java-math-BigDecimal的用法&quot;&gt;&lt;a href=&quot;#java-math-BigDecimal的用法&quot; class=&quot;headerlink&quot; title=&quot;java.math.BigDecimal的用法&quot;&gt;&lt;/a&gt;java.math.BigDeci</summary>
      
    
    
    
    <category term="java" scheme="http://lcdzzz.github.io/categories/java/"/>
    
    
    <category term="2021寒假自学笔记" scheme="http://lcdzzz.github.io/tags/2021%E5%AF%92%E5%81%87%E8%87%AA%E5%AD%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>git bash部分命令行的操作</title>
    <link href="http://lcdzzz.github.io/2020/11/25/git-bash-bu-fen-ming-ling-xing-de-cao-zuo/"/>
    <id>http://lcdzzz.github.io/2020/11/25/git-bash-bu-fen-ming-ling-xing-de-cao-zuo/</id>
    <published>2020-11-24T16:15:47.063Z</published>
    <updated>2021-01-19T12:42:24.168Z</updated>
    
    <content type="html"><![CDATA[<h3 id="使用git-bash-创建文件及文件夹命令"><a href="#使用git-bash-创建文件及文件夹命令" class="headerlink" title="使用git bash 创建文件及文件夹命令"></a>使用git bash 创建文件及文件夹命令</h3><p>1.cd : 切换到哪个目录下， 如 cd e:\fff 切换 E 盘下面的fff 目录。<br>　　当我们用cd 进入文件夹时,我们可以使用 通配符*, cd f*, 如果E盘下只有一个f开头的文件夹,它就会进入到这个文件夹.<br>2.cd … 回退到上一个目录， 注意，cd 和两个点点…之间有一个空格。<br>3.pwd : 显示当前目录路径。<br>4.ls(ll): 都是列出当前目录中的所有文件，只不过ll(两个ll)列出的内容更为详细。<br>5.touch : 新建一个文件 如 touch index.js 就会在当前目录下新建一个index.js文件。<br>6.rm: 删除一个文件, rm index.js 就会把index.js文件删除.<br>7.mkdir: 新建一个目录,就是新建一个文件夹. 如mkdir src 新建src 文件夹.<br>8.rm -r : 删除一个文件夹, rm -r src 删除src目录， 好像不能用通配符。<br>9.mv 移动文件, mv index.html src index.html 是我们要移动的文件, src 是目标文件夹,当然, 这样写,必须保证文件和目标文件夹在同一目录下.<br>10.reset 清屏，把git bash命令窗口中的所有内容清空。</p><h3 id="Vim编辑器的撤销与恢复撤销操作"><a href="#Vim编辑器的撤销与恢复撤销操作" class="headerlink" title="Vim编辑器的撤销与恢复撤销操作"></a>Vim编辑器的撤销与恢复撤销操作</h3><ol><li><p>使用vim修改文档内容</p></li><li><p>按下Esc，回到命令模式</p></li><li><p>按下u，可以发现刚刚新加的内容全部消失了，vim编辑器底部还会显示“4 行被去掉的操作提示”，这就是撤销操作。</p></li><li><p>如果我们想回复到撤销前的内容，按下ctrl+r</p><p>可以看到刚刚被我们撤掉的四行内容又回来了，而且vim编辑器底部会显示“4 行被加入的操作提示”，这就是恢复撤销操作。</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;使用git-bash-创建文件及文件夹命令&quot;&gt;&lt;a href=&quot;#使用git-bash-创建文件及文件夹命令&quot; class=&quot;headerlink&quot; title=&quot;使用git bash 创建文件及文件夹命令&quot;&gt;&lt;/a&gt;使用git bash 创建文件及文件夹命令&lt;/</summary>
      
    
    
    
    <category term="git bash命令" scheme="http://lcdzzz.github.io/categories/git-bash%E5%91%BD%E4%BB%A4/"/>
    
    
  </entry>
  
  <entry>
    <title>解决 java “错误：编码GBK 的不可映射字符”</title>
    <link href="http://lcdzzz.github.io/2020/11/24/jie-jue-java-cuo-wu-bian-ma-gbk-de-bu-ke-ying-she-zi-fu/"/>
    <id>http://lcdzzz.github.io/2020/11/24/jie-jue-java-cuo-wu-bian-ma-gbk-de-bu-ke-ying-she-zi-fu/</id>
    <published>2020-11-24T15:55:12.269Z</published>
    <updated>2021-01-21T09:20:09.860Z</updated>
    
    <content type="html"><![CDATA[<h2 id="解决-java-“错误：编码GBK-的不可映射字符”"><a href="#解决-java-“错误：编码GBK-的不可映射字符”" class="headerlink" title="解决 java “错误：编码GBK 的不可映射字符”"></a>解决 java “错误：编码GBK 的不可映射字符”</h2><ul><li><p>当java程序在idea上可以执行，但在cmd时报错：编码GBK 的不可映射字符时，通常都是因为GB2312编码的问题。</p></li><li><p>比如这个程序。在idea上运行时不会有问题的。用cmd运行时问题就出在第10行的<code>int xd =0//向导数</code>上，其中的“向导数”出了问题。</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Scanner</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>in<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">int</span> line <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>line<span class="token operator">--</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//人数</span>        <span class="token keyword">int</span> xd <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//向导数</span>        <span class="token keyword">int</span> qx <span class="token operator">=</span> n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//抢险</span>        <span class="token keyword">int</span> yl <span class="token operator">=</span><span class="token punctuation">(</span>n<span class="token operator">-</span>qx<span class="token punctuation">)</span> <span class="token operator">*</span><span class="token number">2</span> <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token comment">//医疗</span>        <span class="token keyword">int</span> tx <span class="token operator">=</span> n<span class="token operator">-</span>qx <span class="token operator">-</span> yl<span class="token punctuation">;</span><span class="token comment">//通讯</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>qx <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            xd <span class="token operator">=</span> xd <span class="token operator">+</span> qx <span class="token operator">/</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            xd <span class="token operator">=</span> xd <span class="token operator">+</span> qx <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>yl <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            xd <span class="token operator">=</span> xd <span class="token operator">+</span> yl <span class="token operator">/</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            xd <span class="token operator">=</span> xd <span class="token operator">+</span> yl <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tx <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            xd <span class="token operator">=</span> xd <span class="token operator">+</span> tx <span class="token operator">/</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            xd <span class="token operator">=</span> xd <span class="token operator">+</span> tx <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>xd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>解决方法</p><ol><li><p>检查</p><p>查本机区域语言设置中文没有问题</p><p>需要把当前系统区域设置成中文（简体，中国）</p></li><li><p>在cmd中输入<code>javac -encoding UTF-8 HelloWorlewww.java</code></p><p>其中  <code>HelloWorlewww.java</code>就是你需要运行的java程序</p></li><li><p>记事本打开java源文件，另存为选择ANSI编码</p></li></ol><p>接下来重新用javac等操作编译，编译通过</p></li><li><p>说明：ANSI：美国国家标准协会，系统预设的标准文字储存格式。简体中文编码GB2312，实际上它是ＡＮＳＩ的一个代码页936</p><p>UTF-8：通用字集转换格式，这是为传输而设计的编码，2进制，以8位为单元对Unicode进行编码，如果使用只能在同类位元组内支持8个位元的重要资料一类的旧式传输媒体，可选择UTF-8格式。</p><p>在UTF-8里，英文字符仍然跟ASCII编码一样，因此原先的函数库可以继续使用。而中文的编码范围是在0080-07FF之间，因此是2个字节表示（但这两个字节和GB编码的两个字节是不同的），用专门的Unicode处理类可以对UTF编码进行处理。</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;解决-java-“错误：编码GBK-的不可映射字符”&quot;&gt;&lt;a href=&quot;#解决-java-“错误：编码GBK-的不可映射字符”&quot; class=&quot;headerlink&quot; title=&quot;解决 java “错误：编码GBK 的不可映射字符”&quot;&gt;&lt;/a&gt;解决 java </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>hexo部分命令</title>
    <link href="http://lcdzzz.github.io/2020/11/24/hexo-bu-fen-ming-ling/"/>
    <id>http://lcdzzz.github.io/2020/11/24/hexo-bu-fen-ming-ling/</id>
    <published>2020-11-24T05:37:13.939Z</published>
    <updated>2021-01-21T08:47:12.804Z</updated>
    
    <content type="html"><![CDATA[<p><code>hexo clean&amp;&amp; hexo g &amp;&amp; hexo d</code></p><p><code>hexo clean</code>#清理各种缓存和旧文件</p><p><code>hexo g</code>#生成静态文件</p><p><code>hexo s</code>#开启服务器预览</p><p><code>hexo new &quot;postName&quot;</code> #新建文章</p><p><code>hexo new page &quot;pageName&quot;</code> #新建页面</p><p><code>hexo generate</code> #生成静态页面至public目录</p><p><code>hexo server</code> #开启预览访问端口（默认端口4000，’ctrl + c’关闭server）</p><p><code>hexo deploy</code> #将.deploy目录部署到GitHub</p><p><code>hexo help</code>  # 查看帮助</p><p><code>hexo version</code>  #查看Hexo的版本</p><p><code>hexo deploy -g</code>  #生成加部署</p><p><code>hexo server -g</code>  #生成加预览</p><p>命令的简写</p><p><code>hexo n</code> == <code>hexo new</code> </p><p><code>hexo g</code> == <code>hexo generate</code>  #生成文件</p><p><code>hexo s</code> == <code>hexo server</code> #运行本地服务器</p><p><code>hexo d</code> == <code>hexo deploy</code> #上传到服务器</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;code&gt;hexo clean&amp;amp;&amp;amp; hexo g &amp;amp;&amp;amp; hexo d&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;hexo clean&lt;/code&gt;#清理各种缓存和旧文件&lt;/p&gt;
&lt;p&gt;&lt;code&gt;hexo g&lt;/code&gt;#生成静态文件&lt;/p</summary>
      
    
    
    
    <category term="hexo" scheme="http://lcdzzz.github.io/categories/hexo/"/>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://lcdzzz.github.io/2020/11/24/hello-world/"/>
    <id>http://lcdzzz.github.io/2020/11/24/hello-world/</id>
    <published>2020-11-24T05:37:13.934Z</published>
    <updated>2020-11-24T16:29:39.202Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><blockquote><p>$ hexo new “My New Post”</p></blockquote><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><blockquote><p>$ hexo server</p></blockquote><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><blockquote><p>$ hexo generate</p></blockquote><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><blockquote><p>$ hexo deploy</p></blockquote><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
