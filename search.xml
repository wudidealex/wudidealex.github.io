<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>java自学笔记</title>
      <link href="2021/01/18/java-bi-ji/"/>
      <url>2021/01/18/java-bi-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="IDEA使用"><a href="#IDEA使用" class="headerlink" title="IDEA使用"></a>IDEA使用</h2><h3 id="新建"><a href="#新建" class="headerlink" title="新建"></a>新建</h3><ol><li><p>新建一个Empty Project</p><p>新建一个空的工程，选择创建工程窗口下面的Empty Project</p></li><li><p>给空的工程起一个名字：javase</p></li><li><p>会自动弹出一个：project structure，这个窗口先取消掉</p></li><li><p>给空的工程下新建Module（模块）</p><p>idea的组织方式projecrt–&gt;module</p></li><li><p>在New Module窗口上点击左下角的java，然后next</p></li><li><p>给module起一个名字</p></li><li><p>编写代码，在src目录下新建类，写代码，并运行。</p></li></ol><p><br><br></p><h3 id="关于IDEA工具的快捷键以及一些简单的设置"><a href="#关于IDEA工具的快捷键以及一些简单的设置" class="headerlink" title="关于IDEA工具的快捷键以及一些简单的设置"></a>关于IDEA工具的快捷键以及一些简单的设置</h3><h4 id="字体设置"><a href="#字体设置" class="headerlink" title="字体设置"></a>字体设置</h4><p>file–&gt;setting–&gt;输入font–&gt;设置字体样式以及字号大小</p><p><br><br></p><h4 id="快捷方式"><a href="#快捷方式" class="headerlink" title="快捷方式"></a>快捷方式</h4><ul><li>psvm（main方法）        sout（system.out.println)</li></ul><ul><li>删除一行：ctrl+y</li></ul><ul><li><p>左侧窗口的列表怎么展开？怎么关闭？</p><p>左箭头关闭，右箭头展开，上下箭头移动</p></li></ul><ul><li>idea中退出任何窗口，都可以使用esc键</li></ul><ul><li><p>任何新增、新建、添加的快捷键：</p><p>​    alt+insert</p></li></ul><ul><li><p>窗口变大变小</p><p>​    ctrl+shift+F12</p></li></ul><ul><li><p>快速运行</p><p>ctrl+shift+F10</p></li></ul><ul><li><p>切换java程序：</p><p>alt+左/右箭头</p></li></ul><ul><li><p>切换窗口：</p><p>alt+标号（打开/关闭）</p><p>alt+1(打开、关闭)</p></li></ul><ul><li>提示方法的参数：ctrl+p</li></ul><ul><li><p>注释：</p><p>单行注释：ctrl+/</p><p>多行注释：ctrl+shift+/</p></li></ul><ul><li><p>怎么定位方法/属性/变量?</p><p>光标停到单词下面，这个单词可能是方法名、变量名，停到单词下面之后，按住ctrl键，出现下划线，点击跳转。</p></li></ul><ul><li><p>idea当中复制一行是ctrl+d</p></li><li><p>idea工具中纠正错误的快捷键：alt+回车</p></li><li><p>快速查看源代码：ctrl按住。点击单词</p><br><br><br><br></li></ul><h2 id="super关键字"><a href="#super关键字" class="headerlink" title="super关键字"></a>super关键字</h2><ol><li><p>super是一个关键字，全部小写</p></li><li><p>super和this对比着学习</p><p>this：</p><ul><li><p>能出现在实例方法和构造方法中</p></li><li><p>语法是”this.” 、 “this()”</p></li><li><p><strong>this不能出现在静态方法中</strong></p></li><li><p>大部分条件下是可以省略的</p></li><li><p>this.什么时候不能省略呢？</p><p><strong>在区分局部变量和实例变量的时候不能省略。</strong></p><p><code>public void setName(string name)&#123;</code></p><p>​    <code>this.name=name;</code></p><p><code>&#125;</code></p><p><strong>this()只能出现在构造方法第一行</strong>，通过当前的构造方法去调用“本类”中其他的构造方法，目的是：代码复用。</p></li></ul><p>super：</p><ul><li><p>能出现在实例方法和构造方法中</p></li><li><p>语法是”super.” 、 “super()”</p></li><li><p><strong>super不能出现在静态方法中</strong></p></li><li><p>大部分条件下是可以省略的</p></li><li><p>super.什么时候不能省略呢？</p><p><strong>父类和子类中有同名属性或者说有同样的方法，</strong></p><p><strong>想在子类中访问父类的，super. 不能省略。</strong></p><p><strong>super（)只能出现在构造方法第一行</strong>，通过当前的构造方法去调用“父类”中其他的构造方法，目的是：创建子类对象的时候，先初始化父类型特征</p></li></ul></li><li><p>super()</p><p>表示通过子类的构造方法调用父类的构造方法。</p><p>模拟现实世界中：要想要儿子，必须先有父亲。</p><p>//一个类如果没有手动提供任何构造方法，系统会默认提供一个无参数构造方法。</p><p>//一个类如果手动提供了一个构造方法，那么无参数构造方法系统将不会再提供。</p></li><li><p>重要结论：</p><p><strong>当一个构造方法第一行：</strong></p><p><strong>既没有this（）又没有super（）的话，默认会有一个super（）；</strong></p><p><strong>表示通过当前子类的构造方法调用父类的无参数构造方法。</strong></p><p><strong>所以必须保证父类的无参数构造方法是存在的。</strong></p></li><li><p>注意：</p><p>this()和super()不能共存，他们都是只能出现在构造方法的第一行。</p></li><li><p><strong>无论怎么折腾，父类的构造方法是一定会执行的（100%）。</strong></p><p>//在java语言中不管是new什么对象。最后老祖宗的object类的无参数构造方法一定会执行（object类的无参数构造方法是处于“栈顶部”）</p><p>栈顶的特点：</p><p>最后调用，但最先执行结束。</p><p>后进先出原则</p><p>以后写代码的时候，一个类的无参数构造方法还是建议手动写出来。</p><p>如果无参数构造方法丢失的话，可能会影响到子类对象的构建</p></li><li><p>注意：在构造方法执行过程中一连串调用了父类的构造方法，父类的构造方法有继续向下调用它的父类构造方法，但实际上对象只创建了一个。</p><p>super（实参）的作用：初始化当前对象的父类型特征，并不是创建新对象，对象只创建了一个。</p><p>//java中允许在子类中出现一个和父类同名的变量、同名属性。</p></li><li><p>super不是引用，也不保存内存地址，也不指向任何对象，super只代表当前对象内部的那一块父类型的特征。</p></li><li><p>在父和子中有同名的属性或者相同的方法，如果此时想在子类中访问父类的数据，必须使用”super.”加一区分。</p></li><li><p>在子类中访问父类私有的数据，使用super.没有权限的</p><p>但父类私有的构造方法，可以用super（实参）去构造。</p></li></ol><p><em>super的使用</em><br><em>supe</em>r.属性名    【访问父类的属性】*</p><p><em>super.方法名(实参)   【访问父类的方法】</em></p><p>super.(实参)   【调用父类的构造方法】*</p><br><br><br><br><h2 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h2><ol><li><p>final修饰的变量？</p><p><strong>final修饰的局部标量，一但被赋值，就不能重新赋值【final修饰的变量只能赋一次值】</strong></p></li></ol><ol start="2"><li><p>fianl修饰的方法？</p><p><strong>final修饰的方法无法被覆盖，被重写</strong></p></li></ol><ol start="3"><li><p>fianl修饰的类？</p><p><strong>final修饰的类无法被继承</strong></p></li></ol><ol start="4"><li>final控制不了能不能调用的问题，final管的是：最后的，不能变的，不能改的。</li></ol><ol start="5"><li><p>final修饰的变量，如果这个变量是一个人”引用“</p><p>引用也是一个变量，所以也是不能变的</p><p><code>*final person p=new person(30);*</code><br><code>*p=new Person(30)//错误！无法为最终变量p分配值*</code></p></li></ol><p>   <strong>final修饰的引用：</strong></p><p>  该引用只能指向1个对象，并且它只能永远指向该对象，无法指向其他对象。<br>  并且在该方法执行过程中，该引用指向对象后，该对象不会被垃圾回收器回收。</p><p>  直到当前方法结束，才会释放空间。</p><p>  虽然final的引用指向对象A后，不能再重新指向对象B。<br>  但是对象内部的数据可以被修改。</p><ol start="6"><li><p><strong>final修饰的实例变量，系统不负责赋默认值，要求程序员必须手动赋值。</strong></p><p>这个手动赋值，在变量后面赋值可以，在构造方法赋值也可以。</p><p>final修饰的实例变量一般添加static修饰</p><p><em>解释：</em><br><em>i永远都是10，创建100个对象，i也是10</em><br><em>i是10是永远都不会改变的，既然这样，没必要声明为实例变量，最好是静态，节省内存空间</em></p><p><strong>static final联合修饰的变量成为“常量”。</strong></p></li></ol><p>​    例：<code>public static final double PI=3.1415926;</code></p><p>   常量名建议大写，每个单词之间采用下划线来衔接。</p><p>   <em>常量：实际上常量和静态变量一样，区别在于：</em></p><p>   <em>常量的值不能变。</em></p><p>   <em>常量和静态变量，都是存储在方法去，并且都是类加载时初始化</em>。</p><br><br><br><br><h2 id="抽象类（abstract）"><a href="#抽象类（abstract）" class="headerlink" title="抽象类（abstract）"></a>抽象类（abstract）</h2><ol><li><p>抽象类怎么定义？</p><p>在class钱添加abstract关键字。</p></li><li><p><strong>抽象类是无法实例化的，无法创建对象的，所以抽象类是用来被子类继承的</strong>。</p></li><li><p>final和abstract不能联合使用，这两个关键字是对立的。</p></li><li><p>抽象类的子类可以是抽象类，也可以不是。</p></li><li><p>抽象类虽然无法实例化，但是抽象类有构造方法，这个构造方法是供子类使用的。</p></li><li><p><strong>抽象类中不一定有抽象方法，但是抽象方法必须出现在抽象类中。</strong></p></li><li><p>抽象方法怎么定义？</p><p><code>public abstract void dosome();</code></p></li><li><p><strong>一个非抽象的类，继承抽象类，必须将抽象类中的抽象方法进行覆盖/重写/实现。</strong></p></li><li><p>面试题（判断）：java语言中凡是没有方法体的方法都是抽象方法。（×）</p><p><em>object类中就有很多方法没有方法体，都是以“;”结尾的，但他们不是抽象方法，例如：</em></p><p><em><code>public native int hashCode();</code></em></p><p><em>这个方法底层调用了C++写的动态链接库。</em></p><p><em>前面修饰符列表中没有：abstract。有一个native表示调用JVM本地程序。</em></p><br><br><br><br></li></ol><h2 id="接口（接口也是一种类）"><a href="#接口（接口也是一种类）" class="headerlink" title="接口（接口也是一种类）"></a>接口（接口也是一种类）</h2><h3 id="接口的基础语法"><a href="#接口的基础语法" class="headerlink" title="接口的基础语法"></a>接口的基础语法</h3><ol><li><p>接口也是一种“引用数据类型”。编译之后也是一个class字节码文件。</p></li><li><p>接口完全抽象。（抽象类是半抽象。）或者也可以说接口是特殊的抽象类。</p></li><li><p>接口怎么定义的，语法是什么？</p><p>[修饰符列表] interface 接口名{}</p></li><li><p>接口支持多继承。</p><p><code>interface C extend A，B&#123;</code></p><p><code>&#125;</code></p></li><li><p>接口只包含两个内容：常量+抽象方法。</p></li><li><p>接口中所有元素都会public修饰的。</p></li><li><p>接口中的抽象方法定义是：pubiic abstract 修饰符可以省略。</p></li><li><p>接口中的常量的public static final可以省略。</p></li><li><p>接口中的方法是抽象方法，所以接口中的方法不能有方法体（不能加大括号{}）。</p></li><li><p>一个非抽象的类，实现接口的时候，必须将接口中所有方法加以实现。</p></li><li><p>一个类可以实现多个接口</p></li><li><p>extends和implements可以共存，extends在前，implements在后。</p><p><code>class Cat extends Animal implements Flyable&#123;</code></p><p>​    <code>&#125;</code></p></li></ol><ol start="13"><li><p>使用使用接口，在写代码时，可以使用多态（父类型引用指向子类型对象）。</p><p>向下转型要养成习惯：转型之前先if+instanceof进行判断</p><p><code>if(m instanceof K)&#123;</code></p><p><code>K k = (K) m；</code></p><p><code>&#125;</code></p><p><br><br></p></li></ol><h3 id="接口在开发中的作用"><a href="#接口在开发中的作用" class="headerlink" title="接口在开发中的作用"></a>接口在开发中的作用</h3><p>注意：接口在开发中的作用，类似于多态在开发中的作用。</p><p>多态：面向抽象编程，不要面向具体编程。降低程序耦合度。提高程序的扩展力。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Master</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">feed</span><span class="token punctuation">(</span><span class="token class-name">Dog</span> d<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">feed</span><span class="token punctuation">(</span><span class="token class-name">Cat</span> c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token comment">//假设又要养其他宠物，那么这个时候需要再加1个方法。（需要修改代码）</span>    <span class="token comment">//这样扩展力太差，违背了ocp原则（对扩展开放，对修改关闭）</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Master</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">feed</span><span class="token punctuation">(</span><span class="token class-name">Animal</span> a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">/*        面向Animal 父类编程，父类是比子类更抽象的。所以我们叫做面向抽象编程，不要面向具体编程。这样程序的扩展力就强。        */</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接口在开发总共的作用？</p><p>抽象是完全抽象的，而我们以后正好要求，面向抽象编程。</p><p>面向抽象编程这句话以后可以修改为：面向接口编程。</p><p>有了剪口就有了可插拔，可插拔表示扩展力很强，不是焊接死的。</p><p>主板和内存条之间有插槽，这个插槽就是接口，内存条坏了，可以重新买一个换下来，这叫做高扩展性（低耦合度）。</p><p><br><br></p><p><strong>总结一句话：三个字<u>解耦合</u></strong></p><p>面向接口编程，可以降低程序耦合度，提高程序扩展力。符合ocp开发原则 。接口的使用离不开多态机制。（接口+多态才可以打到降低耦合度。）</p><p> 接口可以解耦合，解开的是谁和谁的耦合？？？</p><p>任何一个接口都有调用者和实现着。</p><p>接口可以讲调用者和实现者解耦合。</p><p>调用者面向接口调用。</p><p>实现者面向接口编写实现。</p><br><p>以后进行大项目的开发，一般都是讲项目分离成一个模块一个模块的，模块和模块之间采用接口衔接，降低耦合度 </p><br><br><br><br><h2 id="类型和类型之间的关系："><a href="#类型和类型之间的关系：" class="headerlink" title="类型和类型之间的关系："></a>类型和类型之间的关系：</h2><p>is a（继承）、has a（关联）、 like a（实现）</p><ul><li><p>is a:</p><p>Ca is a Animal(猫是一个动物)</p><p>凡是能够满足is a的表示“继承关系”</p><p><code>A extends B;</code></p></li><li><p>has a:</p><p>I has a Pen(我有一支笔)</p><p>凡是能够满足has a 关系的表示“关联关系”</p><p>关联关系通常以“属性”的形式存在。</p><p><code>A&#123;</code></p><p><code>   B b;</code></p><p><code>&#125;</code></p></li><li><p>like a：</p><p>Cooker like a FoodMenu(厨师想一个菜单一样)、</p><p>凡是能够满足like a 关系的表示“实现关系”</p><p>实现关系通常是：类实现接口。</p><p><code>A implements B;</code></p></li></ul><br><br><br><br><h3 id="抽象类和接口有什么区别"><a href="#抽象类和接口有什么区别" class="headerlink" title="抽象类和接口有什么区别"></a>抽象类和接口有什么区别</h3><p><em>这里直说下抽象类和接口在语法上的区别。至于以后抽象类和接口应该怎么进行选择，通过后面的项目去体会。</em></p><br><p>抽象类是半抽象的</p><p>接口是完全抽象的</p><br><p>抽象类中有构造方法。</p><p>接口中没有构造方法。</p><br><p>类与类之间只能单继承。</p><p>接口与接口直接支持多继承。</p><br><p>一个抽象类只能继承一个类（单继承）。</p><p>一个类可以同时实现多个接口。</p><br><p>接口中只允许出现常量和抽象方法。</p><br><p>以后接口使用的比抽象类多。一般抽象类使用的还是少。</p><p>接口一般都是对“行为”的抽象。</p><p>抽象类既可以抽象行为又可以抽象数据。</p><br><br><br><br><h2 id="package和import机制"><a href="#package和import机制" class="headerlink" title="package和import机制"></a>package和import机制</h2><h3 id="package"><a href="#package" class="headerlink" title="package"></a>package</h3><ol><li><p>package出现在java源文件第一行。</p></li><li><p>带有包名怎么编译？</p><p>javac -d . xxx.java</p></li><li><p>怎么运行？</p><p>java 完整类名</p><p>例：<code>java com.bjpowernode.javase.chapter17.HelloWorld</code></p><br><br></li></ol><h3 id="import"><a href="#import" class="headerlink" title="import"></a>import</h3><p>import什么时候不需要？</p><ul><li>java.lang不需要</li><li>同包下不需要</li><li>其他一律都需要</li></ul><p>怎么用？</p><ul><li>import 完整类名</li><li>import 包名.*;</li></ul><p><br><br><br><br></p><h2 id="访问控制权限"><a href="#访问控制权限" class="headerlink" title="访问控制权限"></a>访问控制权限</h2><h3 id="有哪些访问控制权限？"><a href="#有哪些访问控制权限？" class="headerlink" title="有哪些访问控制权限？"></a>有哪些访问控制权限？</h3><ul><li>private 私有</li><li>protect 受保护</li><li>public 公开</li><li> ____    默认</li></ul><p><br><br></p><h3 id="以上四种访问控制权限，控制的范围是什么？"><a href="#以上四种访问控制权限，控制的范围是什么？" class="headerlink" title="以上四种访问控制权限，控制的范围是什么？"></a>以上四种访问控制权限，控制的范围是什么？</h3><table><thead><tr><th>访问控制修饰符</th><th>本类</th><th>同包</th><th>子类</th><th>任意位置</th></tr></thead><tbody><tr><td>public</td><td>Y</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>protected</td><td>Y</td><td>Y</td><td>Y</td><td>N</td></tr><tr><td>默认</td><td>Y</td><td>Y</td><td>N</td><td>N</td></tr><tr><td>private</td><td>Y</td><td>N</td><td>N</td><td>N</td></tr></tbody></table><p>public&gt;protected&gt;默认&gt;private</p><p><br><br></p><h3 id="访问控制权限修饰符可以修饰什么"><a href="#访问控制权限修饰符可以修饰什么" class="headerlink" title="访问控制权限修饰符可以修饰什么"></a>访问控制权限修饰符可以修饰什么</h3><ul><li>属性（4个都行）</li><li>方法（4个都能用）</li><li>类（public 和默认可以，其他不行）</li><li>接口（public 和默认可以，其他不行）</li></ul><p><br><br><br><br></p><h2 id="JDK类库的根类：Object"><a href="#JDK类库的根类：Object" class="headerlink" title="JDK类库的根类：Object"></a>JDK类库的根类：Object</h2><p>这个老祖宗中的方法都是所有子类通用的，任何一个类默认继承Object，就算没有继承，也会间接继承</p><h3 id="Object类当中有哪些常用的方法？"><a href="#Object类当中有哪些常用的方法？" class="headerlink" title="Object类当中有哪些常用的方法？"></a>Object类当中有哪些常用的方法？</h3><p>怎么找？</p><ol><li>去源代码当中。（但这种方式比较麻烦，源代码也比较难）</li><li>去查阅java的类库的帮助文档。</li></ol><p>什么事API?</p><p>​      应用程序的编程接口。整个JDK的类库就是一个javase的API（application program interface）。每一个API都会配置一套API帮助文档。SUN公司提前写好的这套类库就是API。（一般每一份API都对应一份API帮助文档。）、</p><p>目前为止我们只需要知道这几个方法即可：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token class-name">Object</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span>； <span class="token comment">//负责对象克隆的</span><span class="token keyword">int</span> <span class="token function">hashOde</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//换区对象哈希值的一个方法</span><span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//判断两个对象是否相等</span><span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//讲哦对象转换成字符串形式</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//垃圾回收器负责调用的方法 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br><br></p><h3 id="toString-方法"><a href="#toString-方法" class="headerlink" title="toString()方法"></a>toString()方法</h3><p>以后所有类的toString()方法是需要重写的，重写规则，越简单越明了就好。</p><p>System.out.println(引用)；这里会自动调用“引用”的toString()方法。</p><p>String类是SUN写的，toString方法已经重写了。</p><p><br><br></p><h3 id="equals-方法"><a href="#equals-方法" class="headerlink" title="equals()方法"></a>equals()方法</h3><p>以后所有类的equals方法也需要重写，因为object中的equals方法比较的是两个对象的内存地址，我们应该比较内容，所以需要重写。</p><p>重写规则：自己定，主要看是什么和什么相等时表示里欧昂个对象相等。</p><p>基本数据类型比较实用：==</p><p>对象和对象比较：调用equals方法</p><p>String类是SUN编写的，所以Strng类的equals方法重写了。</p><p>以后判断两个字符串是否相等，最好不要实用==。要调用字符串对象的equals方法。</p><p><br><br></p><h3 id="finalize-方法"><a href="#finalize-方法" class="headerlink" title="finalize()方法"></a>finalize()方法</h3><ol><li><p>在Object类中的源代码：</p><p><code>protected void finaliz() throw Throwable&#123; &#125;</code></p><p>GC：负责带一把过finalize()方法</p></li><li><p>finalize()方法只有一个方塔提，里面没有代码，而且这个方法是protected修饰的。</p></li><li><p>这个方法不需要程序员手动调用，JVM的垃圾回收器会负责调调用这个方法。</p><p>不像equals toString ,equals和toString（）方法是需要你写代码调用的。</p><p>finalize（）只需要重写，重写玩将来会自动会有程序来调用。</p></li><li><p>finalize()方法的执行时机</p><p>当一个java对象即将被垃圾回收器回收的时候，垃圾回收器负责调用fianlize()方法。</p></li><li><p>finalize()方法实际上是SUN公司为java程序员准备的一个实际，垃圾销毁时机。</p><p>如果希望在对象销毁时机执行一段代码的话，这段代码要写在finalize()方法中。</p></li><li><p>静态代码块的作用是什么？</p><p>static{</p><p>   …</p><p>}</p><p>静态代码块在类加载的时候执行，并且只执行一次，这是一个SUN准备的类加载时机。</p><p>finalize()方法同样是sun为程序员准备的一个时机。</p><p>这个时机是垃圾回收时机。</p></li><li><p>有段代码可以建议垃圾回收期启动</p><p><code>System.gc();   // 建议激动垃圾回收器</code></p></li></ol><p><br><br></p><h3 id="hashCode方法："><a href="#hashCode方法：" class="headerlink" title="hashCode方法："></a>hashCode方法：</h3><ol><li><p>在object中的hashCode方法是怎么样的?</p><p>public native int hashCode();</p><p>这个方法不是抽象方法，带有native关键字，底层调用c++程序。</p></li><li><p>hashCode()fang方法返回的是哈线：</p><p>实际上就是java对象的内存地址，经过哈希算法，得出一个值。</p><p>所以hashCode（）方法的执行结果可以等同看做一个java对象的内存地址</p></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> main <span class="token punctuation">(</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">Object</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> hashCodeValue <span class="token operator">=</span> o<span class="token punctuation">.</span><span class="token function">hashcode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//对象内存地址经过哈希算法转换的一个数字。可以等同看做内存地址。</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hashCodeValue<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//89641564</span>              <span class="token class-name">MyClass</span> mc<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">MyClass</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mc<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//5641864654</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">MyClass</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br><br><br><br></p><h2 id="匿名内部类："><a href="#匿名内部类：" class="headerlink" title="匿名内部类："></a>匿名内部类：</h2><ol><li><p>内部类：在类的内部又定义了一个新的类。被称为内部类。</p></li><li><p>内部类的分类：</p><p>静态内部类：类似于静态变量</p><p>实例内部类：类似于实例变量</p><p>局部内部类：类似于局部变量</p></li><li><p>使用内部类编写的代码，可读性差，尽量别用</p></li><li><p>匿名内部类是局部内部类的一种。因为这个类没有名字而得名，叫做匿名内部类。</p></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">mm<span class="token punctuation">.</span><span class="token function">mySum</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Compute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*mm是对象，使用了mySum这个方法compute是一个接口，不能直接new对象，这里使用了匿名内部类。如果不用匿名内部类，那么需要再创建一个class，去implements接口*/</span><span class="token comment">//以下是不使用匿名内部类的方法</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ComputeImpl</span> <span class="token keyword">implements</span> <span class="token class-name">Compute</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> sum <span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br><br><br><br></p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><ol><li><p>数组的优缺点，并且要理解为什么</p><ol><li><p>空间存储上，内存地址是连续的</p></li><li><p>每个元素占用的空间大小相同</p></li><li><p>知道首元素的内存地址</p></li><li><p>通过下班可以计算出偏移量</p><p>通过一个数学表达式，就可以快速计算出摸个下标为止上元素的内存1地址，直接通过内存地址定位，效率非常高。</p></li><li><p>优点：检索效率高。</p><p>缺点随记增删改效率较低，数组无法存储大数据量</p><p>注意：数组最后一个元素增删效率不受影响</p><br></li></ol></li><li><p>以为数组的静态初始化和动态初始化</p><ul><li><p>静态初始化：</p><p><code>int[] arr = &#123;1,2,3,4&#125;;</code></p><p><code>object[] objs = &#123;new Object(),new Object(),new Object() &#125;;</code></p></li><li><p>动态初始化</p><p><code>int []arr=new int[4];</code></p><p><code>Object[] objs=new Object[4]; //元素默认值为null</code></p><br></li></ul></li><li><p>一维数组的遍历</p><br></li><li><p>二维数组的静态初始化和动态初始化</p><ul><li><p>静态初始化：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token operator">=</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token operator">=</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#123;</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ol><ul><li><p>动态初始化</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//三行四列</span><span class="token class-name">Object</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token class-name">Animal</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//Animal累的数组，里面可以存储Animal对象以及它的子类</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ol start="5"><li><p>二维数组的遍历</p></li><li><p>main方法上”String[] args”参数的使用</p></li><li><p>数组的拷贝：System.arraycopy()方法的使用</p><p>数组长度一旦确定，不可变。</p><p>所以数组长度不够的时候需要扩容，扩容的机制是：新建一个大数组，讲小数组的数据拷贝到大数组，小数组被垃圾回收器回收</p></li><li><p>对数组中存储应用数据类型的情况，要会画它的内存结构图</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2021寒假自学笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见的DOS命令</title>
      <link href="2021/01/18/chang-jian-de-dos-ming-ling/"/>
      <url>2021/01/18/chang-jian-de-dos-ming-ling/</url>
      
        <content type="html"><![CDATA[<ul><li><p>打开DOS命令窗口：</p><p>开始菜单–&gt;运行–&gt;输入cmd–&gt;回车/win+r</p></li><li><p>常见的DOS命令：</p><ol><li><p>cls 清屏。</p></li><li><p>DOS窗口怎么复制：选中复制内容后在任意位置点击鼠标右键，此时内容已经在剪切板了。</p></li><li><p>dir 列出当前目录下所有的子文件/子目录。</p></li><li><p>cd 命令</p><ul><li><p>cd命令表示：change directory。</p></li><li><p>怎么用：cd 目录的路径。</p></li><li><p>cd.. 回到上级目录。</p></li><li><p>cd\ 直接回到根目录。</p></li><li><p>怎么切换盘符：</p><p>d:回车。</p></li></ul></li></ol></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 2021寒假自学笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>acm部分做题记录</title>
      <link href="2020/11/28/acm-bu-fen-zuo-ti-ji-lu/"/>
      <url>2020/11/28/acm-bu-fen-zuo-ti-ji-lu/</url>
      
        <content type="html"><![CDATA[<h2 id="hdoj-2036改革春风吹满地"><a href="#hdoj-2036改革春风吹满地" class="headerlink" title="hdoj 2036改革春风吹满地"></a>hdoj 2036改革春风吹满地</h2><ul><li>简述：（变成一般问题的话）一个多边形告诉你边数（定点数）为n，然后是按照逆时针顺序给出的n个顶点的坐标（x1, y1, x2, y2… xn, yn），然后求他的面积。</li></ul><p>这题最简单最快的方法就是叉乘法（原理不懂不要紧，记住公式，反正很容易记）</p><p>部分代码实现</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> t <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                s <span class="token operator">=</span> s<span class="token operator">+</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> b<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">-</span> a<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">*</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2.0</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这当中，数组a代表x坐标，数组b代表y坐标，从i=0（第一个点）叉乘到i=n-1（最后一个点）</p><p>这些点是逆时针顺序的，如果是顺时针，那么求出来的值是负数，就要在前面加一个绝对值<code>Math.abs</code></p><p>上面代码翻译成数学就是:</p><p>s = [（x1 * y2 - x2 * y1）+（x2 * y3 - x3 * y2) + ….. + (x(n - 2) * y(n - 1)-x(n - 1) * y(n - 2))+(x(n-1) * y0 - x0 * y(n-1)) ]/2.0</p><p>接下来就是喜闻乐见的整体代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">       <span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token punctuation">;</span>                  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Scanner</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>in<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">int</span> n <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">int</span>  <span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span> <span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span>  <span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span> <span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">double</span> s <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> t <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                s <span class="token operator">=</span> s<span class="token operator">+</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> b<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">-</span> a<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">*</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2.0</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token comment">//s</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br><br><br><br></p><h2 id="hdoj2045动态规划"><a href="#hdoj2045动态规划" class="headerlink" title="hdoj2045动态规划"></a>hdoj2045动态规划</h2><p>题目链接：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=2045"></a></p><p>【动态规划】:把多阶段过程转化为一系列单阶段问题，利用各阶段之间的关系，<br>逐个求解，创立了解决这类过程优化问题的新方法——动态规划。</p><ul><li><p>思路：设f(n)代表当有n个方格时，满足条件的涂法</p><p>易知：f(1)=3;f(2)=6; f(3)=6;</p><ul><li>假设第n-1个格子的颜色跟第1个相同，<br> 因为第n-1个格子颜色已确定，第n个格子可以涂的颜色有两种，<br> 故为2*f(n-2)</li></ul><p>​                    怎么理解:    以n=4时为例</p><ul><li><u>R G</u> R (P/G) 下划线两个，代表f(2),因为在第1个和第3个相同，所以相当于第3个也已经确定了 。所以是f(2)*2</li><li><u>R G P</u> (G)  下划线三个，代表f(3),因为第1个和第3个不同，留个第4位的只有一个选择了，所以是f(3)*1</li></ul></li><li><p>答案：</p></li></ul><p>​      </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">long</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">long</span> <span class="token punctuation">[</span><span class="token number">51</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">50</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">2</span><span class="token operator">*</span>a<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>       <span class="token class-name">Scanner</span> in  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>in<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">int</span> n<span class="token operator">=</span>in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br><br><br><br></p><h2 id="进制转换加运算"><a href="#进制转换加运算" class="headerlink" title="进制转换加运算"></a>进制转换加运算</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Scanner</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>in<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> num_01 <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> num_02 <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//1.先将字符串转为十六进制,十六进制转为十进制</span>            <span class="token keyword">long</span> result <span class="token operator">=</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">parseLong</span><span class="token punctuation">(</span>num_01<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">+</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">parseLong</span><span class="token punctuation">(</span>num_02<span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>result<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> acm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>java语法随记</title>
      <link href="2020/11/25/java-yu-fa-sui-ji/"/>
      <url>2020/11/25/java-yu-fa-sui-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="java-math-BigDecimal的用法"><a href="#java-math-BigDecimal的用法" class="headerlink" title="java.math.BigDecimal的用法"></a>java.math.BigDecimal的用法</h2><ol><li><p>BigDecimal类型用来存储金额等有小数，需要精度的数据</p></li><li><p>BigDecimal不能直接使用int类型赋值！</p></li><li><p>两种使BigDecimal初始化为0的方法:<br>BigDecimal a=BigDecimal<br>BigDecimal b=new BigDecimal(0);<br>BigDecimal a = in.nextBigDecimal();</p><ul><li>除法运算：</li></ul><p>​      <code>System.out.println(new BigDecimal(153.5).divide(new BigDecimal(100), 2, BigDecimal.ROUND_HALF_UP));</code></p><p>　  //new BigDecimal(100)除数，2精确的位数，BigDecimal.ROUND_HALF_UP：舍入模式</p><ul><li><p>加法运算：</p><p><code>System.out.println(new BigDecimal(&quot;2.005&quot;).add(new BigDecimal(&quot;0.03&quot;)));</code></p></li><li><p>减法运算：</p><p><code>System.out.println(new BigDecimal(&quot;2.00&quot;).subtract(new BigDecimal(&quot;1.10&quot;)));</code></p></li><li><p>乘法运算：</p><p><code>System.out.println(new BigDecimal(&quot;2.05&quot;).multiply(new BigDecimal(&quot;10&quot;)));</code></p></li></ul></li></ol><p><br><br><br><br></p><h2 id="char-SS-s-toCharArray"><a href="#char-SS-s-toCharArray" class="headerlink" title="char [] SS = s.toCharArray();"></a>char [] SS = s.toCharArray();</h2><ul><li><p><code>char [] SS = s.toCharArray();</code></p><p>//把字符串中的每个字符放进ss的字符数组里</p><p><br><br><br><br></p></li></ul><h2 id="s-contains-“4”-s-contains-“62”"><a href="#s-contains-“4”-s-contains-“62”" class="headerlink" title="s.contains(“4”)||s.contains(“62”)"></a>s.contains(“4”)||s.contains(“62”)</h2><ul><li><p><code>(s.contains(&quot;4&quot;)||s.contains(&quot;62&quot;)</code></p><p>//判断s字符串里有没有包含”4”或”62”</p></li></ul><p><br><br><br><br></p><h2 id="java自定义函数调用"><a href="#java自定义函数调用" class="headerlink" title="java自定义函数调用"></a>java自定义函数调用</h2><h3 id="一：主类中的自定义函数"><a href="#一：主类中的自定义函数" class="headerlink" title="一：主类中的自定义函数"></a>一：主类中的自定义函数</h3><p>在主类中，如果想要在main函数中调用自定义的其他方法，则这个函数需要使用<u>static关键字</u>定义，否则会报错Cannot make a static reference to the non-static method xx from the type xx，调用的时候<u>直接用函数名</u>就可以了，如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">class</span> create_function <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>　　<span class="token keyword">int</span> s <span class="token operator">=</span> <span class="token function">jia</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">jia</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是自定义相加函数，我被调用了！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>               <span class="token punctuation">&#125;</span>     <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面使用static关键字定义了一个“+”运算的函数，在main中调用时，直接使用函数名，括号中加参数就可以了。输出结果如下：</p><p>​        我是自定义相加函数，我被调用了！！<br>​        9</p><p><br><br></p><h3 id="二：自定义类中函数的调用"><a href="#二：自定义类中函数的调用" class="headerlink" title="二：自定义类中函数的调用"></a>二：自定义类中函数的调用</h3><p>自定义类中函数的调用有两种情况，静态函数和非静态函数，<u>非静态函数的调用需要先声明一个类实例，通过实例调用</u>。静态函数的调用可以通过实例，也可以直接使用类名调用(建议使用这种，要不会造成内存空间的浪费。)，如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> create_function <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token class-name">Y</span> y <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Y</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">int</span> s2 <span class="token operator">=</span> y<span class="token punctuation">.</span><span class="token function">cheng</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//声明了y这个实例</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//直接用Y这个类调用</span>                <span class="token keyword">int</span> s3 <span class="token operator">=</span> <span class="token class-name">Y</span><span class="token punctuation">.</span><span class="token function">chu</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Y</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> <span class="token function">cheng</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是自定义类中的乘方法，我被调用了！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> a<span class="token operator">*</span>b<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">chu</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token punctuation">,</span><span class="token keyword">int</span> d<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是自定义类中的除方法，我被调用了！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> c<span class="token operator">/</span>d<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在下面，自定义了一个Y类，cheng方法是非静态方法，必须通过实例y调用，chu方法是静态方法，使用类名直接调用。输出结果如下：</p><p>​        我是自定义类中的乘方法，我被调用了！<br>​        15<br>​        我是自定义类中的除方法，我被调用了！<br>​        4</p><p><br><br><br><br></p><h2 id="String-valueOf-方法的使用"><a href="#String-valueOf-方法的使用" class="headerlink" title="String.valueOf()方法的使用"></a>String.valueOf()方法的使用</h2><h3 id="一：由基本数据形态转换成String"><a href="#一：由基本数据形态转换成String" class="headerlink" title="一：由基本数据形态转换成String"></a>一：由基本数据形态转换成String</h3><p>String 类别中已经提供了将基本数据型态转换成 String 的 static 方法 ，也就是 <strong>String.valueOf()</strong> 这个参数多载的方法 ：</p><p>（1）<strong>String.valueOf(boolean b)</strong> : 将 boolean 变量 b 转换成字符串<br>（2）<strong>String.valueOf(char c)</strong> : 将 char 变量 c 转换成字符串<br>（3）<strong>String.valueOf(char[] data)</strong> : 将 char 数组 data 转换成字符串<br>（4）<strong>String.valueOf(char[] data, int offset, int count)</strong> : 将 char 数组 data 中 由 data[offset] 开始取 count 个元素 转换成字符串 </p><p>（5）<strong>String.valueOf(double d)</strong> : 将 double 变量 d 转换成字符串<br>（6）<strong>String.valueOf(float f)</strong> : 将 float 变量 f 转换成字符串<br>（7）<strong>String.valueOf(int i)</strong> : 将 int 变量 i 转换成字符串<br>（8）<strong>String.valueOf(long l)</strong> : 将 long 变量 l 转换成字符串<br>（9）<strong>String.valueOf(Object obj)</strong> : 将 obj 对象转换成 字符串, 等于 obj.toString() </p><p>　　<strong>用法如下:</strong><br>　　<code>int i = 10;</code><br>　　<code>String str = String.valueOf(i);</code><br>　　这时候 str 就会是 “10” </p><p><br><br></p><h3 id="二、-由-String-转换成-数字的基本数据型态"><a href="#二、-由-String-转换成-数字的基本数据型态" class="headerlink" title="二、 由 String 转换成 数字的基本数据型态"></a><strong>二、 由 String 转换成 数字的基本数据型态</strong></h3><p>要将 String 转换成基本数据型 ，大多需要使用基本数据型态的包装类别 </p><p>（1） <strong>Byte.parseByte(String s)</strong> : 将 s 转换成 byte </p><p>（2）<strong>Byte.parseByte(String s, int radix)</strong> : 以 radix 为基底（进制基数） 将 s 转换为 byte ，比如说 Byte.parseByte(“11”, 16) 会得到 17。</p><p>（3） <strong>Double.parseDouble(String s)</strong> : 将 s 转换成 double </p><p>（4） <strong>Double.parseFloat(String s)</strong> : 将 s 转换成 float </p><p>（5） <strong>Integer.parseInt(String s)</strong> : 将 s 转换成 int </p><p>（6） <strong>Long.parseLong(String s)</strong> : 将 s 转换成 long</p><h2 id="终止程序的执行，退出JVM"><a href="#终止程序的执行，退出JVM" class="headerlink" title="终止程序的执行，退出JVM"></a>终止程序的执行，退出JVM</h2><blockquote><p>system.exit(0);</p></blockquote><p><br><br><br><br></p><h2 id="强行转换类型（强制类型转换-向下转型）"><a href="#强行转换类型（强制类型转换-向下转型）" class="headerlink" title="强行转换类型（强制类型转换/向下转型）"></a>强行转换类型（强制类型转换/向下转型）</h2><p>调用子类中特有的方法是，需要向下转型</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>c <span class="token keyword">instanceof</span> <span class="token class-name">D</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//c指向的对象如果确实是一个D类型的</span>     <span class="token class-name">D</span> d1<span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">D</span><span class="token punctuation">)</span>c<span class="token punctuation">;</span>    d1<span class="token punctuation">.</span><span class="token function">doOther</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//doOther是D类特有的方法</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><br><br><br><br></p><h2 id="局部变量和成员变量"><a href="#局部变量和成员变量" class="headerlink" title="局部变量和成员变量"></a>局部变量和成员变量</h2><p>局部变量是没有初始值的</p><p>成员变量有初始值（0  0.0  null）</p><p><br><br><br><br></p><h2 id="next部分相关用法"><a href="#next部分相关用法" class="headerlink" title="next部分相关用法"></a>next部分相关用法</h2><ol><li><p>nextInt()它只读取int值，nextInt()在读取输入后将光标放在同一行。</p></li><li><p>next()只读取输入直到空格。它无法阅读两个被空格隔开的单词。</p><p>同样，next()在读取输入后将光标放在同一行中。</p></li><li><p>nextLine()读取包括单词之间的空格在内的输入(也就是说，读取到行n的末尾)。<br>读取输入后，nextLine()将光标定位到下一行。</p></li></ol><p><br><br><br><br></p><h2 id="java中，按数组下标来输出内容"><a href="#java中，按数组下标来输出内容" class="headerlink" title="java中，按数组下标来输出内容"></a>java中，按数组下标来输出内容</h2><p><code>System.out.println(line.substring(6,11));</code><br>意思是：输出line字符串中下标6到11的字符</p><p><br><br><br><br></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2021寒假自学笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git bash部分命令行的操作</title>
      <link href="2020/11/25/git-bash-bu-fen-ming-ling-xing-de-cao-zuo/"/>
      <url>2020/11/25/git-bash-bu-fen-ming-ling-xing-de-cao-zuo/</url>
      
        <content type="html"><![CDATA[<h3 id="使用git-bash-创建文件及文件夹命令"><a href="#使用git-bash-创建文件及文件夹命令" class="headerlink" title="使用git bash 创建文件及文件夹命令"></a>使用git bash 创建文件及文件夹命令</h3><p>1.cd : 切换到哪个目录下， 如 cd e:\fff 切换 E 盘下面的fff 目录。<br>　　当我们用cd 进入文件夹时,我们可以使用 通配符*, cd f*, 如果E盘下只有一个f开头的文件夹,它就会进入到这个文件夹.<br>2.cd … 回退到上一个目录， 注意，cd 和两个点点…之间有一个空格。<br>3.pwd : 显示当前目录路径。<br>4.ls(ll): 都是列出当前目录中的所有文件，只不过ll(两个ll)列出的内容更为详细。<br>5.touch : 新建一个文件 如 touch index.js 就会在当前目录下新建一个index.js文件。<br>6.rm: 删除一个文件, rm index.js 就会把index.js文件删除.<br>7.mkdir: 新建一个目录,就是新建一个文件夹. 如mkdir src 新建src 文件夹.<br>8.rm -r : 删除一个文件夹, rm -r src 删除src目录， 好像不能用通配符。<br>9.mv 移动文件, mv index.html src index.html 是我们要移动的文件, src 是目标文件夹,当然, 这样写,必须保证文件和目标文件夹在同一目录下.<br>10.reset 清屏，把git bash命令窗口中的所有内容清空。</p><h3 id="Vim编辑器的撤销与恢复撤销操作"><a href="#Vim编辑器的撤销与恢复撤销操作" class="headerlink" title="Vim编辑器的撤销与恢复撤销操作"></a>Vim编辑器的撤销与恢复撤销操作</h3><ol><li><p>使用vim修改文档内容</p></li><li><p>按下Esc，回到命令模式</p></li><li><p>按下u，可以发现刚刚新加的内容全部消失了，vim编辑器底部还会显示“4 行被去掉的操作提示”，这就是撤销操作。</p></li><li><p>如果我们想回复到撤销前的内容，按下ctrl+r</p><p>可以看到刚刚被我们撤掉的四行内容又回来了，而且vim编辑器底部会显示“4 行被加入的操作提示”，这就是恢复撤销操作。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> git bash命令 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>解决 java “错误：编码GBK 的不可映射字符”</title>
      <link href="2020/11/24/jie-jue-java-cuo-wu-bian-ma-gbk-de-bu-ke-ying-she-zi-fu/"/>
      <url>2020/11/24/jie-jue-java-cuo-wu-bian-ma-gbk-de-bu-ke-ying-she-zi-fu/</url>
      
        <content type="html"><![CDATA[<h2 id="解决-java-“错误：编码GBK-的不可映射字符”"><a href="#解决-java-“错误：编码GBK-的不可映射字符”" class="headerlink" title="解决 java “错误：编码GBK 的不可映射字符”"></a>解决 java “错误：编码GBK 的不可映射字符”</h2><ul><li><p>当java程序在idea上可以执行，但在cmd时报错：编码GBK 的不可映射字符时，通常都是因为GB2312编码的问题。</p></li><li><p>比如这个程序。在idea上运行时不会有问题的。用cmd运行时问题就出在第10行的<code>int xd =0//向导数</code>上，其中的“向导数”出了问题。</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Scanner</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>in<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">int</span> line <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>line<span class="token operator">--</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//人数</span>        <span class="token keyword">int</span> xd <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//向导数</span>        <span class="token keyword">int</span> qx <span class="token operator">=</span> n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//抢险</span>        <span class="token keyword">int</span> yl <span class="token operator">=</span><span class="token punctuation">(</span>n<span class="token operator">-</span>qx<span class="token punctuation">)</span> <span class="token operator">*</span><span class="token number">2</span> <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token comment">//医疗</span>        <span class="token keyword">int</span> tx <span class="token operator">=</span> n<span class="token operator">-</span>qx <span class="token operator">-</span> yl<span class="token punctuation">;</span><span class="token comment">//通讯</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>qx <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            xd <span class="token operator">=</span> xd <span class="token operator">+</span> qx <span class="token operator">/</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            xd <span class="token operator">=</span> xd <span class="token operator">+</span> qx <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>yl <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            xd <span class="token operator">=</span> xd <span class="token operator">+</span> yl <span class="token operator">/</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            xd <span class="token operator">=</span> xd <span class="token operator">+</span> yl <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tx <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            xd <span class="token operator">=</span> xd <span class="token operator">+</span> tx <span class="token operator">/</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            xd <span class="token operator">=</span> xd <span class="token operator">+</span> tx <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>xd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>解决方法</p><ol><li><p>检查</p><p>查本机区域语言设置中文没有问题</p><p>需要把当前系统区域设置成中文（简体，中国）</p></li><li><p>在cmd中输入<code>javac -encoding UTF-8 HelloWorlewww.java</code></p><p>其中  <code>HelloWorlewww.java</code>就是你需要运行的java程序</p></li><li><p>记事本打开java源文件，另存为选择ANSI编码</p></li></ol><p>接下来重新用javac等操作编译，编译通过</p></li><li><p>说明：ANSI：美国国家标准协会，系统预设的标准文字储存格式。简体中文编码GB2312，实际上它是ＡＮＳＩ的一个代码页936</p><p>UTF-8：通用字集转换格式，这是为传输而设计的编码，2进制，以8位为单元对Unicode进行编码，如果使用只能在同类位元组内支持8个位元的重要资料一类的旧式传输媒体，可选择UTF-8格式。</p><p>在UTF-8里，英文字符仍然跟ASCII编码一样，因此原先的函数库可以继续使用。而中文的编码范围是在0080-07FF之间，因此是2个字节表示（但这两个字节和GB编码的两个字节是不同的），用专门的Unicode处理类可以对UTF编码进行处理。</p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo部分命令</title>
      <link href="2020/11/24/hexo-bu-fen-ming-ling/"/>
      <url>2020/11/24/hexo-bu-fen-ming-ling/</url>
      
        <content type="html"><![CDATA[<p><code>hexo clean&amp;&amp; hexo g &amp;&amp; hexo d</code></p><p><code>hexo clean</code>#清理各种缓存和旧文件</p><p><code>hexo g</code>#生成静态文件</p><p><code>hexo s</code>#开启服务器预览</p><p><code>hexo new &quot;postName&quot;</code> #新建文章</p><p><code>hexo new page &quot;pageName&quot;</code> #新建页面</p><p><code>hexo generate</code> #生成静态页面至public目录</p><p><code>hexo server</code> #开启预览访问端口（默认端口4000，’ctrl + c’关闭server）</p><p><code>hexo deploy</code> #将.deploy目录部署到GitHub</p><p><code>hexo help</code>  # 查看帮助</p><p><code>hexo version</code>  #查看Hexo的版本</p><p><code>hexo deploy -g</code>  #生成加部署</p><p><code>hexo server -g</code>  #生成加预览</p><p>命令的简写</p><p><code>hexo n</code> == <code>hexo new</code> </p><p><code>hexo g</code> == <code>hexo generate</code>  #生成文件</p><p><code>hexo s</code> == <code>hexo server</code> #运行本地服务器</p><p><code>hexo d</code> == <code>hexo deploy</code> #上传到服务器</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2020/11/24/hello-world/"/>
      <url>2020/11/24/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><blockquote><p>$ hexo new “My New Post”</p></blockquote><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><blockquote><p>$ hexo server</p></blockquote><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><blockquote><p>$ hexo generate</p></blockquote><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><blockquote><p>$ hexo deploy</p></blockquote><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
